{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score, KFold, StratifiedKFold,ShuffleSplit, cross_validate\n",
    "from sklearn.datasets import make_blobs\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.model_selection import train_test_split \n",
    "import pandas as pd\n",
    "from babel.numbers import format_currency\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis,LinearDiscriminantAnalysis\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from matplotlib import pyplot as plt\n",
    "from tqdm import tqdm\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.neighbors.nearest_centroid import NearestCentroid\n",
    "from sklearn.semi_supervised import LabelPropagation, LabelSpreading\n",
    "from sklearn.svm import SVC  \n",
    "from xgboost import XGBClassifier\n",
    "import random\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score\n",
    "from sklearn.linear_model import LogisticRegression, SGDClassifier, RidgeClassifier\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.neighbors import RadiusNeighborsClassifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.linear_model import PassiveAggressiveClassifier\n",
    "from sklearn.naive_bayes import MultinomialNB, BernoulliNB, GaussianNB\n",
    "from sklearn.svm import NuSVC\n",
    "from sklearn.metrics import roc_curve, precision_recall_curve, auc, make_scorer, recall_score, accuracy_score, precision_score, confusion_matrix\n",
    "import warnings\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import make_scorer, average_precision_score, precision_recall_curve\n",
    "from mlxtend.classifier import EnsembleVoteClassifier\n",
    "\n",
    "seed = 0\n",
    "\n",
    "def confusion_mx(y, y_predict, labels = [0,1]):\n",
    "    cm = confusion_matrix(y, predictions, labels)\n",
    "    plt.figure(figsize=(4,3))\n",
    "    ax= plt.subplot()\n",
    "    sns.heatmap(cm, annot=True, ax = ax,fmt='g')\n",
    "    # labels, title and ticks\n",
    "    ax.set_xlabel('Predicted labels')\n",
    "    ax.set_ylabel('True labels')\n",
    "    ax.set_title('Confusion Matrix')\n",
    "    ax.xaxis.set_ticklabels([0, 1])\n",
    "    ax.yaxis.set_ticklabels([0, 1])\n",
    "    plt.show()\n",
    "def predict_metrics(y, predictions):\n",
    "    print(classification_report(y,predictions)) \n",
    "    print('>>> Accuracy:',np.round(accuracy_score(predictions, y),3),'<<<')\n",
    "    confusion_mx(y,predictions)\n",
    "\n",
    "'''\n",
    "def get_profit(clf, x_test):\n",
    "    # Define thresholds and profit/cost per answer\n",
    "    thresholds, c = np.arange(0, 1, 0.025), 1\n",
    "    revenue_answer, expense_answer = 11, 3\n",
    "    \n",
    "    # predict with model\n",
    "    y_prob = clf.predict_proba(x_test)[:,c]\n",
    "    revenues = []\n",
    "    dict_thresholds = {}\n",
    "    i=0\n",
    "    for t in thresholds:\n",
    "        y_pred = [0 if v < t else 1 for v in y_prob]\n",
    "        cm = confusion_matrix(y_test, y_pred)\n",
    "        revenue = cm[1][1] * revenue_answer\n",
    "        expenses = cm[:, 1].sum() * expense_answer\n",
    "        net_revenue = revenue - expenses\n",
    "        revenues.append(net_revenue)\n",
    "    \n",
    "    # plot  \n",
    "    plt.figure(figsize=(10,7))\n",
    "    plt.plot(thresholds, revenues, marker='.', label = clf.__class__.__name__)\n",
    "    plt.plot([0, 1], [0, 0], 'k--')\n",
    "    plt.xlabel('\\\"Probability\\\" threshold')\n",
    "    plt.ylabel(\"Net Revenue\")\n",
    "    plt.title('Profit curves on unseen data')\n",
    "    plt.legend(loc='best', title=\"Models\")\n",
    "    plt.show()\n",
    "\n",
    "    t = thresholds[np.argmax(revenues)]\n",
    "    profit_dict = dict(zip(thresholds,revenues))\n",
    "    max_profit = profit_dict[t]\n",
    "\n",
    "    print(\"-------------------------------------------------------------------\")\n",
    "    print(\"The classification threshold wich maximizes the profit: {:.2%}\".format(t))\n",
    "    print(\"Profit:\",format_currency(max_profit, 'EUR', locale='de_DE'))\n",
    "    print(\"-------------------------------------------------------------------\")\n",
    "'''\n",
    "def scale_data(x_train, x_test, scaler = MinMaxScaler()):\n",
    "    x_train_scaled = scaler.fit_transform(x_train)\n",
    "    x_train_scaled = pd.DataFrame(x_train_scaled, columns=x_train.columns, index=x_train.index)\n",
    "    x_test_scaled = scaler.transform(x_test)\n",
    "    x_test_scaled = pd.DataFrame(x_test_scaled, columns=x_test.columns, index=x_test.index)\n",
    "    return x_train_scaled, x_test_scaled\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AcceptedCmp1_01T</th>\n",
       "      <th>R_NumStorePurchases_01T</th>\n",
       "      <th>R_Mnt_NumWebPurchases_01T</th>\n",
       "      <th>R_Mnt_NumStorePurchases_01T</th>\n",
       "      <th>R_Mnt_NumCatalogPurchases_01T</th>\n",
       "      <th>R_MntWines_01T</th>\n",
       "      <th>R_MntMeatProducts_01T</th>\n",
       "      <th>R_MntFishProducts_01T</th>\n",
       "      <th>R_DealFrq_01T</th>\n",
       "      <th>RFM_01T</th>\n",
       "      <th>...</th>\n",
       "      <th>AcceptedCmp2_01T</th>\n",
       "      <th>Marital_Status_01T</th>\n",
       "      <th>AcceptedTot_01T</th>\n",
       "      <th>AcceptedCmp3_01T</th>\n",
       "      <th>Days_as_cust_01T</th>\n",
       "      <th>AcceptedCmp4_01T</th>\n",
       "      <th>Income_01T</th>\n",
       "      <th>AcceptedCmp5_01T</th>\n",
       "      <th>Education_01T</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>0</td>\n",
       "      <td>0.816497</td>\n",
       "      <td>0.704801</td>\n",
       "      <td>0.724756</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.588731</td>\n",
       "      <td>0.481838</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.801784</td>\n",
       "      <td>0.1574</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.166024</td>\n",
       "      <td>0</td>\n",
       "      <td>0.028395</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    AcceptedCmp1_01T  R_NumStorePurchases_01T  R_Mnt_NumWebPurchases_01T  \\\n",
       "ID                                                                         \n",
       "67                 0                 0.816497                   0.704801   \n",
       "\n",
       "    R_Mnt_NumStorePurchases_01T  R_Mnt_NumCatalogPurchases_01T  \\\n",
       "ID                                                               \n",
       "67                     0.724756                            0.0   \n",
       "\n",
       "    R_MntWines_01T  R_MntMeatProducts_01T  R_MntFishProducts_01T  \\\n",
       "ID                                                                 \n",
       "67        0.588731               0.481838                    0.0   \n",
       "\n",
       "    R_DealFrq_01T  RFM_01T    ...     AcceptedCmp2_01T  Marital_Status_01T  \\\n",
       "ID                            ...                                            \n",
       "67       0.801784   0.1574    ...                    0                   1   \n",
       "\n",
       "    AcceptedTot_01T  AcceptedCmp3_01T  Days_as_cust_01T  AcceptedCmp4_01T  \\\n",
       "ID                                                                          \n",
       "67              0.0                 0          0.166024                 0   \n",
       "\n",
       "    Income_01T  AcceptedCmp5_01T  Education_01T  Response  \n",
       "ID                                                         \n",
       "67    0.028395                 0              1         0  \n",
       "\n",
       "[1 rows x 27 columns]"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train = pd.read_excel('df_02.xlsx', index_col=0)\n",
    "test = pd.read_excel('df_test_02.xlsx', index_col = 0)\n",
    "train.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AcceptedCmp1_01T</th>\n",
       "      <th>R_NumStorePurchases_01T</th>\n",
       "      <th>R_Mnt_NumWebPurchases_01T</th>\n",
       "      <th>R_Mnt_NumStorePurchases_01T</th>\n",
       "      <th>R_Mnt_NumCatalogPurchases_01T</th>\n",
       "      <th>R_MntWines_01T</th>\n",
       "      <th>R_MntMeatProducts_01T</th>\n",
       "      <th>R_MntFishProducts_01T</th>\n",
       "      <th>R_DealFrq_01T</th>\n",
       "      <th>RFM_01T</th>\n",
       "      <th>...</th>\n",
       "      <th>AcceptedCmp2_01T</th>\n",
       "      <th>Marital_Status_01T</th>\n",
       "      <th>AcceptedTot_01T</th>\n",
       "      <th>AcceptedCmp3_01T</th>\n",
       "      <th>Days_as_cust_01T</th>\n",
       "      <th>AcceptedCmp4_01T</th>\n",
       "      <th>Income_01T</th>\n",
       "      <th>AcceptedCmp5_01T</th>\n",
       "      <th>Education_01T</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2895</th>\n",
       "      <td>0</td>\n",
       "      <td>0.745356</td>\n",
       "      <td>0.657711</td>\n",
       "      <td>0.663696</td>\n",
       "      <td>0.460157</td>\n",
       "      <td>0.306529</td>\n",
       "      <td>0.608015</td>\n",
       "      <td>0.695128</td>\n",
       "      <td>0.534522</td>\n",
       "      <td>0.836929</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.127624</td>\n",
       "      <td>0</td>\n",
       "      <td>0.039571</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      AcceptedCmp1_01T  R_NumStorePurchases_01T  R_Mnt_NumWebPurchases_01T  \\\n",
       "ID                                                                           \n",
       "2895                 0                 0.745356                   0.657711   \n",
       "\n",
       "      R_Mnt_NumStorePurchases_01T  R_Mnt_NumCatalogPurchases_01T  \\\n",
       "ID                                                                 \n",
       "2895                     0.663696                       0.460157   \n",
       "\n",
       "      R_MntWines_01T  R_MntMeatProducts_01T  R_MntFishProducts_01T  \\\n",
       "ID                                                                   \n",
       "2895        0.306529               0.608015               0.695128   \n",
       "\n",
       "      R_DealFrq_01T   RFM_01T    ...     AcceptedCmp2_01T  Marital_Status_01T  \\\n",
       "ID                               ...                                            \n",
       "2895       0.534522  0.836929    ...                    0                   1   \n",
       "\n",
       "      AcceptedTot_01T  AcceptedCmp3_01T  Days_as_cust_01T  AcceptedCmp4_01T  \\\n",
       "ID                                                                            \n",
       "2895              0.0                 0          0.127624                 0   \n",
       "\n",
       "      Income_01T  AcceptedCmp5_01T  Education_01T  Response  \n",
       "ID                                                           \n",
       "2895    0.039571                 0              0         0  \n",
       "\n",
       "[1 rows x 27 columns]"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Nr. features to keep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "def top_features(df, top):\n",
    "    tmp = df.iloc[:,:top]\n",
    "    tmp = pd.concat([tmp,df.Response],axis=1)\n",
    "    return tmp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Data Size:\t2240\n",
      "Current Data Size:\t1732\n",
      "Nro. of columns:\t27\n",
      "Deleted 22.68% of Data\n"
     ]
    }
   ],
   "source": [
    "print('Original Data Size:\\t2240\\nCurrent Data Size:\\t{}\\nNro. of columns:\\t{}\\nDeleted {:.2%} of Data'.format(train.shape[0],train.shape[1],1-train.shape[0]/2240))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# To balance or Not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAf4AAADTCAYAAABgKnF5AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvqOYd8AAAEpxJREFUeJzt3X2wXHddx/H3h8YWUbEtvcWSpKTaiFbkoVxLFWUYgiVFJB2GSqvYWDoTH6qoKFrUoQoywFBFqlgnkNAHsaXiQ6PW1kxAO0pbGtrSR6F3CtNcUsit6QNaHgx8/WN/sUtyk25v7u7m3vN+zezsOd/z2z3f25n0s789Z89JVSFJkrrhSeNuQJIkjY7BL0lShxj8kiR1iMEvSVKHGPySJHWIwS9JUocY/JIkdYjBL0lShxj8kiR1yJJxNzAMq1evrmuuuWbcbUiSNEoZZNCinPE/8MAD425BkqSD0qIMfkmSNDuDX5KkDjH4JUnqEINfkqQOMfglSeqQRflzvmF6wZsuHXcL0gH75LvPGncLksbEGb8kSR1i8EuS1CEGvyRJHWLwS5LUIUML/iQbk+xIcscs234zSSU5qq0nyYVJppLcluTEvrFrk9zTHmuH1a8kSV0wzBn/xcDqPYtJlgM/DtzXVz4VWNke64CL2tgjgfOBFwInAecnOWKIPUuStKgNLfir6jpg5yyb3gP8FlB9tTXApdVzA3B4kmOAlwObq2pnVT0IbGaWDxOSJGkwIz3Gn+RVwOer6lN7bFoKbOtbn261fdVne+91SbYm2TozMzOPXUuStHiMLPiTPAX4XeAts22epVb7qe9drFpfVZNVNTkxMTH3RiVJWsRGOeP/HuA44FNJPgcsA25O8l30ZvLL+8YuA7bvpy5JkuZgZMFfVbdX1dFVtaKqVtAL9ROr6gvAJuCsdnb/ycDDVXU/cC1wSpIj2kl9p7SaJEmag2H+nO9y4HrgWUmmk5yzn+FXA/cCU8D7gV8CqKqdwNuAm9rjra0mSZLmYGg36amqMx9n+4q+5QLO3ce4jcDGeW1OkqSO8sp9kiR1iMEvSVKHGPySJHWIwS9JUocY/JIkdYjBL0lShxj8kiR1iMEvSVKHGPySJHWIwS9JUocY/JIkdYjBL0lShwzz7nwbk+xIckdf7d1J/jPJbUn+LsnhfdvenGQqyaeTvLyvvrrVppKcN6x+JUnqgmHO+C8GVu9R2ww8u6qeA3wGeDNAkhOAM4AfaK/58ySHJDkEeB9wKnACcGYbK0mS5mBowV9V1wE796j9S1Xtaqs3AMva8hrgiqr6alV9FpgCTmqPqaq6t6q+BlzRxkqSpDkY5zH+1wP/3JaXAtv6tk232r7qe0myLsnWJFtnZmaG0K4kSQvfWII/ye8Cu4AP7S7NMqz2U9+7WLW+qiaranJiYmJ+GpUkaZFZMuodJlkLvBJYVVW7Q3waWN43bBmwvS3vqy5Jkp6gkc74k6wGfht4VVU92rdpE3BGksOSHAesBD4B3ASsTHJckkPpnQC4aZQ9S5K0mAxtxp/kcuAlwFFJpoHz6Z3FfxiwOQnADVX1C1V1Z5IrgbvoHQI4t6q+3t7nl4FrgUOAjVV157B6liRpsRta8FfVmbOUN+xn/NuBt89Svxq4eh5bkySps7xynyRJHWLwS5LUIQa/JEkdYvBLktQhBr8kSR1i8EuS1CEGvyRJHWLwS5LUIQa/JEkdYvBLktQhBr8kSR1i8EuS1CFDC/4kG5PsSHJHX+3IJJuT3NOej2j1JLkwyVSS25Kc2PeatW38PUnWDqtfSZK6YJgz/ouB1XvUzgO2VNVKYEtbBzgVWNke64CLoPdBgd7tfF8InAScv/vDgiRJeuKGFvxVdR2wc4/yGuCStnwJcFpf/dLquQE4PMkxwMuBzVW1s6oeBDaz94cJSZI0oFEf4396Vd0P0J6PbvWlwLa+cdOttq/6XpKsS7I1ydaZmZl5b1ySpMXgYDm5L7PUaj/1vYtV66tqsqomJyYm5rU5SZIWi1EH/xfbV/i05x2tPg0s7xu3DNi+n7okSZqDUQf/JmD3mflrgav66me1s/tPBh5uhwKuBU5JckQ7qe+UVpMkSXOwZFhvnORy4CXAUUmm6Z2d/07gyiTnAPcBp7fhVwOvAKaAR4GzAapqZ5K3ATe1cW+tqj1PGJQkSQMaWvBX1Zn72LRqlrEFnLuP99kIbJzH1iRJ6qyD5eQ+SZI0Aga/JEkdYvBLktQhBr8kSR1i8EuS1CEGvyRJHWLwS5LUIQMFf5Itg9QkSdLBbb8X8EnyZOAp9K6+dwSP3TTnqcAzhtybJEmaZ4935b6fB36NXsh/kseC/xHgfUPsS5IkDcF+g7+q3gu8N8mvVNWfjqgnSZI0JANdq7+q/jTJjwAr+l9TVZcOqS9JkjQEg57cdxlwAfCjwA+1x+Rcd5rk15PcmeSOJJcneXKS45LcmOSeJB9Ocmgbe1hbn2rbV8x1v5Ikdd2gd+ebBE5od9E7IEmWAm9o7/flJFcCZ9C7Le97quqKJH8BnANc1J4frKrjk5wBvAt47YH2IUlSFw36O/47gO+ax/0uAb41yRJ6vxq4H3gp8JG2/RLgtLa8pq3Ttq9KEiRJ0hM26Iz/KOCuJJ8Avrq7WFWveqI7rKrPJ7kAuA/4MvAv9H4x8FBV7WrDpoGlbXkpsK29dleSh4GnAQ880X1LktR1gwb/78/XDtv1ANYAxwEPAX8NnDrL0N2HFWab3e91yCHJOmAdwLHHHjsvvUqStNgMelb/v83jPl8GfLaqZgCS/C3wI8DhSZa0Wf8yYHsbPw0sB6bboYHvBHbO0uN6YD3A5OTkAZ+LIEnSYjToWf1fSvJIe3wlydeTPDLHfd4HnJzkKe1Y/SrgLuBjwGvamLXAVW15U1unbf/ofJxkKElSFw064/+O/vUkpwEnzWWHVXVjko8ANwO7gFvozdT/CbgiyR+22ob2kg3AZUmm6M30z5jLfiVJ0uDH+L9JVf19kvPmutOqOh84f4/yvczyYaKqvgKcPtd9SZKkxwwU/Ele3bf6JHq/6/frdkmSFphBZ/w/2be8C/gcvTPzJUnSAjLoMf6zh92IJEkavkHP6l+W5O+S7EjyxSR/k2TZsJuTJEnza9BL9n6Q3s/qnkHvSnr/0GqSJGkBGTT4J6rqg1W1qz0uBiaG2JckSRqCQYP/gSSvS3JIe7wO+K9hNiZJkubfoMH/euCngC/Qu5PeawBP+JMkaYEZ9Od8bwPWVtWDAEmOBC6g94FAkiQtEIPO+J+zO/QBqmon8PzhtCRJkoZl0OB/UrudLvD/M/45Xe5XkiSNz6Dh/UfAx9vNdYre8f63D60rSZI0FINeue/SJFuBlwIBXl1Vdw21M0mSNO8G/rq+Bf28hH2Sw4EPAM+m9w3C64FPAx8GVtC7F8BPVdWDSQK8F3gF8Cjwc1V183z0IUlS1wx6jH++vRe4pqq+D3gucDdwHrClqlYCW9o6wKnAyvZYB1w0+nYlSVocRh78SZ4KvBjYAFBVX6uqh+jd7e+SNuwS4LS2vAa4tHpuAA5PcsyI25YkaVEYx4z/u4EZ4INJbknygSTfBjy9qu4HaM9Ht/FLgW19r59utW+SZF2SrUm2zszMDPcvkCRpgRpH8C8BTgQuqqrnA//DY1/rzyaz1GqvQtX6qpqsqsmJCW8jIEnSbMYR/NPAdFXd2NY/Qu+DwBd3f4Xfnnf0jV/e9/plwPYR9SpJ0qIy8uCvqi8A25I8q5VW0fu1wCZgbautBa5qy5uAs9JzMvDw7kMCkiTpiRnX1fd+BfhQkkOBe+nd8OdJwJVJzgHuA05vY6+m91O+KXo/5/PmQJIkzdFYgr+qbgUmZ9m0apaxBZw79KYkSeqAcf2OX5IkjYHBL0lShxj8kiR1iMEvSVKHGPySJHWIwS9JUocY/JIkdYjBL0lShxj8kiR1iMEvSVKHGPySJHWIwS9JUoeMLfiTHJLkliT/2NaPS3JjknuSfLjduY8kh7X1qbZ9xbh6liRpoRvnjP9Xgbv71t8FvKeqVgIPAue0+jnAg1V1PPCeNk6SJM3BWII/yTLgJ4APtPUALwU+0oZcApzWlte0ddr2VW28JEl6gsY14/8T4LeAb7T1pwEPVdWutj4NLG3LS4FtAG37w238N0myLsnWJFtnZmaG2bskSQvWyIM/ySuBHVX1yf7yLENrgG2PFarWV9VkVU1OTEzMQ6eSJC0+S8awzxcBr0ryCuDJwFPpfQNweJIlbVa/DNjexk8Dy4HpJEuA7wR2jr5tSZIWvpHP+KvqzVW1rKpWAGcAH62qnwE+BrymDVsLXNWWN7V12vaPVtVeM35JkvT4Dqbf8f828MYkU/SO4W9o9Q3A01r9jcB5Y+pPkqQFbxxf9f+/qvpX4F/b8r3ASbOM+Qpw+kgbkyRpkTqYZvySJGnIDH5JkjrE4JckqUMMfkmSOsTglySpQwx+SZI6xOCXJKlDDH5JkjrE4JckqUPGeuU+SRrUfW/9wXG3IM2LY99y+1j374xfkqQOMfglSeqQkQd/kuVJPpbk7iR3JvnVVj8yyeYk97TnI1o9SS5MMpXktiQnjrpnSZIWi3HM+HcBv1FV3w+cDJyb5AR6t9vdUlUrgS08dvvdU4GV7bEOuGj0LUuStDiMPPir6v6qurktfwm4G1gKrAEuacMuAU5ry2uAS6vnBuDwJMeMuG1JkhaFsR7jT7ICeD5wI/D0qrofeh8OgKPbsKXAtr6XTbfanu+1LsnWJFtnZmaG2bYkSQvW2II/ybcDfwP8WlU9sr+hs9Rqr0LV+qqarKrJiYmJ+WpTkqRFZSzBn+Rb6IX+h6rqb1v5i7u/wm/PO1p9Glje9/JlwPZR9SpJ0mIyjrP6A2wA7q6qP+7btAlY25bXAlf11c9qZ/efDDy8+5CAJEl6YsZx5b4XAT8L3J7k1lb7HeCdwJVJzgHuA05v264GXgFMAY8CZ4+2XUmSFo+RB39V/TuzH7cHWDXL+ALOHWpTkiR1hFfukySpQwx+SZI6xOCXJKlDDH5JkjrE4JckqUMMfkmSOsTglySpQwx+SZI6xOCXJKlDDH5JkjrE4JckqUMMfkmSOmTBBH+S1Uk+nWQqyXnj7keSpIVoQQR/kkOA9wGnAicAZyY5YbxdSZK08CyI4AdOAqaq6t6q+hpwBbBmzD1JkrTgLBl3AwNaCmzrW58GXtg/IMk6YF1b/e8knx5Rb5p/RwEPjLuJxSwXrB13Czo4+W9vFM7PsN75mqpa/XiDFkrwz/Zfqb5ppWo9sH407WiYkmytqslx9yF1jf/2umGhfNU/DSzvW18GbB9TL5IkLVgLJfhvAlYmOS7JocAZwKYx9yRJ0oKzIL7qr6pdSX4ZuBY4BNhYVXeOuS0Nj4dspPHw314HpKoef5QkSVoUFspX/ZIkaR4Y/JIkdYjBr4OKl2aWRi/JxiQ7ktwx7l40fAa/Dhpemlkam4uBx73wixYHg18HEy/NLI1BVV0H7Bx3HxoNg18Hk9kuzbx0TL1I0qJk8Otg8riXZpYkHRiDXwcTL80sSUNm8Otg4qWZJWnIDH4dNKpqF7D70sx3A1d6aWZp+JJcDlwPPCvJdJJzxt2ThsdL9kqS1CHO+CVJ6hCDX5KkDjH4JUnqEINfkqQOMfglSeqQJeNuQNLoJfk6cDu9/wd8FvjZqnpovF1JGgVn/FI3fbmqnldVz6Z3c5Zzx92QpNEw+CVdT9/NkJK8KclNSW5L8get9m1J/inJp5LckeS1rf65JO9K8on2OL7Vn5lkS3uPLUmObfWLk1yY5ONJ7k3ymlY/Jsl1SW5t7/9jrX5KkuuT3Jzkr5N8+4j/20iLjsEvdViSQ4BVtEsjJzkFWEnvFsnPA16Q5MX07tW+vaqe274luKbvbR6pqpOAPwP+pNX+DLi0qp4DfAi4sG/8McCPAq8E3tlqPw1cW1XPA54L3JrkKOD3gJdV1YnAVuCN8/n3S11k8Evd9K1JbgX+CzgS2Nzqp7THLcDNwPfR+yBwO/CyNrv/sap6uO+9Lu97/uG2/MPAX7Xly+gF/W5/X1XfqKq7gKe32k3A2Ul+H/jBqvoScDJwAvAfrde1wDMP+C+XOs7gl7rpy212/UzgUB47xh/gHe34//Oq6viq2lBVnwFeQO8DwDuSvKXvvWofy+yj/tW+5QBU1XXAi4HPA5clOatt29zXywlV5TXkpQNk8Esd1mbubwB+M8m30LtB0ut3H0tPsjTJ0UmeATxaVX8JXACc2Pc2r+17vr4tf5ze3RUBfgb49/31keSZwI6qej+wob3/DcCL+s4beEqS7z2gP1iSP+eTuq6qbknyKeCMqrosyfcD1ycB+G/gdcDxwLuTfAP4X+AX+97isCQ30ptInNlqbwA2JnkTMAOc/ThtvAR4U5L/bfs8q6pmkvwccHmSw9q43wM+c0B/sNRx3p1P0pwl+RwwWVUPjLsXSYPxq35JkjrEGb8kSR3ijF+SpA4x+CVJ6hCDX5KkDjH4JUnqEINfkqQO+T++9gju8LwGTQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 576x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,3))\n",
    "plt.gca().spines['right'].set_visible(False)\n",
    "plt.gca().spines['top'].set_visible(False)\n",
    "ax = sns.countplot(x=\"Response\", data=train)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sets\n",
    "x_train = train.drop(columns='Response')\n",
    "y_train = train.Response\n",
    "\n",
    "x_test = test.drop(columns='Response')\n",
    "y_test = test.Response\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "# scale Train and Test\n",
    "x_train, x_test = scale_data(x_train, x_test, scaler = MinMaxScaler())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Models\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1. Standard**\n",
    "\n",
    "* Logistic\n",
    "* Multinomial NB\n",
    "* Bernoulli NB\n",
    "* GaussianNB\n",
    "* Passive Aggressive Classifier\n",
    "* Label Propagation\n",
    "* Label Spreading\n",
    "* NUSVC\n",
    "* SVC\n",
    "* Random Forest Classifier\n",
    "* SGD Classifier\n",
    "* Decision Tree Classifier\n",
    "* XGB Classifier\n",
    "* Gradient Boosting Classifier\n",
    "* RidgeClassifier\n",
    "* KNeighborsClassifier\n",
    "* QuadraticDiscriminantAnalysis\n",
    "* LinearDiscriminantAnalysis\n",
    "* Nearest Centroid\n",
    "\n",
    "**2. Extras**\n",
    "\n",
    "* Boosting\n",
    "* Voting\n",
    "\n",
    "**3. Neural Networks**\n",
    "\n",
    "* MLP\n",
    "* Keras Deep Learning\n",
    "\n",
    "**4. Hyperparameter Tunning**\n",
    "* Grid Search\n",
    "* Random Search\n",
    "* Keras with GA\n",
    "\n",
    "**5. Try with decomposed features**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# models\n",
    "n_jobs = -1\n",
    "models = [LogisticRegression(random_state = seed, n_jobs = n_jobs),\n",
    "          MLPClassifier(random_state=seed)\n",
    "         ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# grid\n",
    "\n",
    "def sampling(data, column, seed):\n",
    "    #random.seed(seed)\n",
    "    \n",
    "    num_of_1=len(data.loc[data[column]==1])\n",
    "    idxs=random.sample(set(data.loc[data[column]==0].index), num_of_1)\n",
    "    new_data_0 = data.loc[data.index.isin(idxs)]\n",
    "    \n",
    "    sample = pd.concat((new_data_0, data.loc[data[column]==1]), axis=0)\n",
    "    \n",
    "    y=sample[column]\n",
    "    x=sample.drop(columns=column)\n",
    "    \n",
    "    return( x , y)\n",
    "\n",
    "\n",
    "x_t, y_t = sampling(train, 'Response', seed = 0)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "  0%|          | 0/2 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 2 candidates, totalling 10 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:    3.6s finished\n",
      " 50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ     | 1/2 [00:03<00:03,  3.66s/it][Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 2 candidates, totalling 10 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:    1.2s finished\n",
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2/2 [00:05<00:00,  2.99s/it]\n"
     ]
    }
   ],
   "source": [
    "grid_dict={\n",
    "    'LogisticRegression':{'C':[10, 50]},\n",
    "    'MLPClassifier':{'hidden_layer_sizes': [(1),(2)]}\n",
    "    }\n",
    "\n",
    "# Add MLP to best models\n",
    "n_splits = 5\n",
    "CV = StratifiedKFold(n_splits=n_splits, random_state=seed)#KFold(n_splits=n_splits, random_state=seed)\n",
    "cv_df = pd.DataFrame(index=range(n_splits * len(models)))\n",
    "scoring = ['accuracy','precision','recall','f1']\n",
    "\n",
    "grid_search_dict={}\n",
    "for model in tqdm(models):\n",
    "    model_gs = GridSearchCV(model,grid_dict[model.__class__.__name__],cv = CV,n_jobs=-1,scoring='f1',verbose=1)\n",
    "    model_gs.fit(x_t,y_t)\n",
    "    grid_search_dict[model.__class__.__name__]=model_gs.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mlxtend.classifier import EnsembleVoteClassifier\n",
    "from imblearn.pipeline import make_pipeline, Pipeline\n",
    "smote_ = SMOTE(random_state=seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "  0%|          | 0/6 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 17%|â–ˆâ–‹        | 1/6 [00:12<01:00, 12.09s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 33%|â–ˆâ–ˆâ–ˆâ–Ž      | 2/6 [00:26<00:51, 12.86s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ     | 3/6 [00:38<00:38, 12.67s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 67%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‹   | 4/6 [00:50<00:24, 12.37s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 83%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–Ž | 5/6 [01:02<00:12, 12.16s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 6/6 [01:13<00:00, 12.01s/it]\n"
     ]
    }
   ],
   "source": [
    "scoring = ['accuracy','precision','recall','f1','profit', 'profit_norm']\n",
    "\n",
    "vote_df = pd.DataFrame()\n",
    "\n",
    "x = x_train\n",
    "y = y_train\n",
    "\n",
    "for score in tqdm(scoring):\n",
    "    \n",
    "    v_claf = EnsembleVoteClassifier(clfs=models, voting='soft', verbose=1)\n",
    "    pipeline = make_pipeline(smote_, v_claf)\n",
    "    \n",
    "    if score != 'profit' and score != 'profit_norm':\n",
    "        entries = []\n",
    "        model_name = v_claf.__class__.__name__\n",
    "        accuracies = cross_val_score(pipeline, x, y, scoring= score, cv=CV)\n",
    "        for fold_idx, accuracy in enumerate(accuracies):\n",
    "            entries.append((model_name, fold_idx, accuracy))\n",
    "        cv_df = pd.DataFrame(entries, columns=['model_name', 'fold_idx', score])\n",
    "        vote_df[score] = cv_df.groupby('model_name')[score].agg('mean')\n",
    "    \n",
    "    else:\n",
    "        profits = []\n",
    "        profits_norm = []\n",
    "        revenue_answer, expense_answer = 11, 3\n",
    "\n",
    "        revenues = []\n",
    "        revenues_norm = []\n",
    "\n",
    "        for fold_train, fold_valid in CV.split(x,y):\n",
    "            pipeline.fit(x.iloc[fold_train],y.iloc[fold_train])\n",
    "            y_prob = v_claf.predict_proba(x.iloc[fold_valid])[:,1]\n",
    "            t = 0.5\n",
    "            y_pred = [0 if v < t else 1 for v in y_prob]\n",
    "            cm = confusion_matrix(y.iloc[fold_valid], y_pred)\n",
    "            revenue = cm[1][1] * revenue_answer\n",
    "            expenses = cm[:, 1].sum() * expense_answer\n",
    "            net_revenue = revenue - expenses\n",
    "            r_real = np.sum(y.iloc[fold_valid].values)*8\n",
    "\n",
    "            revenues.append(net_revenue)\n",
    "            revenues_norm.append(net_revenue/r_real)\n",
    "        profits.append(np.average(revenues))\n",
    "        profits_norm.append(np.average(revenues_norm))\n",
    "        if score =='profit':\n",
    "            vote_df[score] = profits\n",
    "        else:\n",
    "            vote_df[score] = profits_norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>accuracy</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>profit</th>\n",
       "      <th>profit_norm</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>EnsembleVoteClassifier</th>\n",
       "      <td>0.870083</td>\n",
       "      <td>0.543933</td>\n",
       "      <td>0.806637</td>\n",
       "      <td>0.648048</td>\n",
       "      <td>227.8</td>\n",
       "      <td>0.552027</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        accuracy  precision    recall        f1  profit  \\\n",
       "model_name                                                                \n",
       "EnsembleVoteClassifier  0.870083   0.543933  0.806637  0.648048   227.8   \n",
       "\n",
       "                        profit_norm  \n",
       "model_name                           \n",
       "EnsembleVoteClassifier     0.552027  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_x = test.drop(columns='Response')\n",
    "test_y = test.Response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_scores = pipeline.predict_proba(test_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n",
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n"
     ]
    }
   ],
   "source": [
    "max_profits = []\n",
    "\n",
    "best_t = []\n",
    "revenue_answer, expense_answer = 11, 3\n",
    "\n",
    "\n",
    "thresholds, c = np.arange(0, 1, 0.025), 1\n",
    "revenue_answer, expense_answer = 11, 3\n",
    "\n",
    "for fold_train, fold_valid in CV.split(x,y):\n",
    "    #\n",
    "    v_claf = EnsembleVoteClassifier(clfs=models, voting='soft', verbose=1)\n",
    "    pipeline = make_pipeline(smote_, v_claf)\n",
    "    \n",
    "    pipeline.fit(x.iloc[fold_train],y.iloc[fold_train])\n",
    "\n",
    "    revenues = []\n",
    "    \n",
    "    \n",
    "    y_prob = v_claf.predict_proba(x.iloc[fold_valid])[:,1]\n",
    "    \n",
    "    for t in thresholds:\n",
    "        y_pred = [0 if v < t else 1 for v in y_prob]\n",
    "        cm = confusion_matrix(y.iloc[fold_valid], y_pred)\n",
    "        revenue = cm[1][1] * revenue_answer\n",
    "        expenses = cm[:, 1].sum() * expense_answer\n",
    "        net_revenue = revenue - expenses\n",
    "        revenues.append(net_revenue)\n",
    "        \n",
    "        \n",
    "    t = thresholds[np.argmax(revenues)]\n",
    "    profit_dict = dict(zip(thresholds,revenues))\n",
    "    max_profits.append(profit_dict[t])\n",
    "    #max_profits.append(max_profit)\n",
    "    best_t.append(t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(0.625, 289), (0.4, 264), (0.6000000000000001, 186), (0.5750000000000001, 260), (0.525, 230)]\n",
      "0.545\n",
      "245.8\n"
     ]
    }
   ],
   "source": [
    "print(list(zip(best_t,max_profits)))\n",
    "print(np.mean(best_t))\n",
    "print(np.mean(max_profits))\n",
    "\n",
    "mean_t = np.mean(best_t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "def adjusted_classes(y_scores, t):\n",
    "    \"\"\"\n",
    "    This function adjusts class predictions based on the prediction threshold (t).\n",
    "    Will only work for binary classification problems.\n",
    "    \"\"\"\n",
    "    return [1 if y >= t else 0 for y in y_scores]\n",
    "\n",
    "def precision_recall_threshold(p, r, thresholds, t=0.5):\n",
    "    \"\"\"\n",
    "    plots the precision recall curve and shows the current value for each\n",
    "    by identifying the classifier's threshold (t).\n",
    "    \"\"\"\n",
    "    \n",
    "    # generate new class predictions based on the adjusted_classes\n",
    "    # function above and view the resulting confusion matrix.\n",
    "    y_pred_adj = adjusted_classes(y_scores, t)\n",
    "    print(pd.DataFrame(confusion_matrix(y_test, y_pred_adj),\n",
    "                       columns=['pred_neg', 'pred_pos'], \n",
    "                       index=['neg', 'pos']))\n",
    "    \n",
    "    # plot the curve\n",
    "    plt.figure(figsize=(8,8))\n",
    "    plt.title(\"Precision and Recall curve ^ = current threshold\")\n",
    "    plt.step(r, p, color='b', alpha=0.2,\n",
    "             where='post')\n",
    "    plt.fill_between(r, p, step='post', alpha=0.2,\n",
    "                     color='b')\n",
    "    plt.ylim([0, 1.01]);\n",
    "    plt.xlim([0, 1.01]);\n",
    "    plt.xlabel('Recall');\n",
    "    plt.ylabel('Precision');\n",
    "    \n",
    "    # plot the current threshold on the line\n",
    "    close_default_clf = np.argmin(np.abs(thresholds - t))\n",
    "    plt.plot(r[close_default_clf], p[close_default_clf], '^', c='k',\n",
    "            markersize=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "# fit dados todos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 2 classifiers...\n",
      "Fitting clf1: logisticregression (1/2)\n",
      "Fitting clf2: mlpclassifier (2/2)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Pipeline(memory=None,\n",
       "     steps=[('smote', SMOTE(k_neighbors=5, kind='deprecated', m_neighbors='deprecated', n_jobs=1,\n",
       "   out_step='deprecated', random_state=0, ratio=None,\n",
       "   sampling_strategy='auto', svm_estimator='deprecated')), ('ensemblevoteclassifier', EnsembleVoteClassifier(clfs=[LogisticRegression(C=1.0, class_weight...verbose=False, warm_start=False)],\n",
       "            refit=True, verbose=1, voting='soft', weights=None))])"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipeline.fit(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_scores = pipeline.predict_proba(test_x)[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------------------------------------------------------------\n",
      "The classification threshold wich maximizes the profit: 54.50%\n",
      "Profit: 281,00Â â‚¬\n",
      "-------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "# Define thresholds and profit/cost per answer\n",
    "thresholds, c = [mean_t], 1\n",
    "revenue_answer, expense_answer = 11, 3\n",
    "\n",
    "# predict with model\n",
    "y_prob = pipeline.predict_proba(x_test)[:,c]\n",
    "revenues = []\n",
    "dict_thresholds = {}\n",
    "i=0\n",
    "for t in thresholds:\n",
    "    y_pred = [0 if v < t else 1 for v in y_prob]\n",
    "    cm = confusion_matrix(y_test, y_pred)\n",
    "    revenue = cm[1][1] * revenue_answer\n",
    "    expenses = cm[:, 1].sum() * expense_answer\n",
    "    net_revenue = revenue - expenses\n",
    "    revenues.append(net_revenue)\n",
    "\n",
    "# plot  \n",
    "plt.figure(figsize=(10,7))\n",
    "plt.plot(thresholds, revenues, marker='.', label = pipeline.__class__.__name__)\n",
    "plt.plot([0, 1], [0, 0], 'k--')\n",
    "plt.xlabel('\\\"Probability\\\" threshold')\n",
    "plt.ylabel(\"Net Revenue\")\n",
    "plt.title('Profit curves on unseen data')\n",
    "plt.legend(loc='best', title=\"Models\")\n",
    "plt.show()\n",
    "\n",
    "t = thresholds[np.argmax(revenues)]\n",
    "profit_dict = dict(zip(thresholds,revenues))\n",
    "max_profit = profit_dict[t]\n",
    "\n",
    "print(\"-------------------------------------------------------------------\")\n",
    "print(\"The classification threshold wich maximizes the profit: {:.2%}\".format(t))\n",
    "print(\"Profit:\",format_currency(max_profit, 'EUR', locale='de_DE'))\n",
    "print(\"-------------------------------------------------------------------\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "p, r, thresholds = precision_recall_curve(test_y, y_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     pred_neg  pred_pos\n",
      "neg       357        24\n",
      "pos        30        37\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "precision_recall_threshold(p, r, thresholds, t=mean_t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "n_jobs = -1\n",
    "models= [LogisticRegression(random_state = seed, n_jobs = n_jobs),\n",
    "         MultinomialNB(),\n",
    "         BernoulliNB()]#,\n",
    "         '''\n",
    "         GaussianNB(),\n",
    "         #PassiveAggressiveClassifier(random_state=seed, n_jobs = n_jobs), # parece ser bom\n",
    "         #NuSVC(random_state=seed, gamma='scale',probability=True), # bom\n",
    "         LabelPropagation(n_jobs = n_jobs, alpha = 0, kernel='knn'),\n",
    "         LabelSpreading(n_jobs = n_jobs, kernel = 'knn'),\n",
    "         RandomForestClassifier(random_state = seed,n_jobs = n_jobs),\n",
    "         SGDClassifier(random_state = seed,n_jobs = n_jobs,loss='log'),\n",
    "         DecisionTreeClassifier(random_state = seed),\n",
    "         XGBClassifier(random_state = seed,n_jobs = n_jobs),\n",
    "         GradientBoostingClassifier(random_state = seed),\n",
    "         #RidgeClassifier(random_state = seed),\n",
    "         SVC(random_state = seed,kernel='linear',probability=True),\n",
    "         KNeighborsClassifier(n_jobs = n_jobs),\n",
    "         #NearestCentroid(),\n",
    "         QuadraticDiscriminantAnalysis(),\n",
    "         LinearDiscriminantAnalysis()]\n",
    "    '''\n",
    "#RadiusNeighborsClassifier(n_jobs=-1, radius=10, weights ='uniform') #podre\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_splits = 5\n",
    "CV = StratifiedKFold(n_splits=n_splits, random_state=seed)#KFold(n_splits=n_splits, random_state=seed)\n",
    "cv_df = pd.DataFrame(index=range(n_splits * len(models)))\n",
    "scoring = ['accuracy','precision','recall','f1'] #accuracy #precision #recall #f1\n",
    "#entries = []\n",
    "\n",
    "x = x_train\n",
    "y = y_train \n",
    "\n",
    "from imblearn.pipeline import make_pipeline, Pipeline\n",
    "smote_ = SMOTE(random_state=seed)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cv_scorings = pd.DataFrame()\n",
    "n_jobs = -1\n",
    "models = [LogisticRegression(random_state = seed, n_jobs = n_jobs),\n",
    "         MultinomialNB(),\n",
    "         BernoulliNB(),\n",
    "         GaussianNB(),\n",
    "         LabelPropagation(n_jobs = n_jobs, alpha = 0, kernel='knn'),\n",
    "         LabelSpreading(n_jobs = n_jobs, kernel = 'knn'),\n",
    "         RandomForestClassifier(random_state = seed,n_jobs = n_jobs),\n",
    "         SGDClassifier(random_state = seed,n_jobs = n_jobs,loss='log'),\n",
    "         DecisionTreeClassifier(random_state = seed),\n",
    "          MLPClassifier(random_state=seed),\n",
    "         #XGBClassifier(random_state = seed,n_jobs = n_jobs),\n",
    "         GradientBoostingClassifier(random_state = seed),\n",
    "         #SVC(random_state = seed,kernel='linear',probability=True),\n",
    "         KNeighborsClassifier(n_jobs = n_jobs),\n",
    "         #NearestCentroid(),\n",
    "         QuadraticDiscriminantAnalysis(),\n",
    "         LinearDiscriminantAnalysis()]\n",
    "\n",
    "cv_df_2 = pd.DataFrame()\n",
    "for score in scoring:\n",
    "    entries = []\n",
    "    for model in models:\n",
    "        # Pipeline to oversample using smote\n",
    "        pipeline = make_pipeline(smote_, model)\n",
    "        \n",
    "        model_name = model.__class__.__name__\n",
    "        '''\n",
    "        if model_name == 'SVC' or model_name == 'XGBClassifier':\n",
    "            # got to transform into a matrix\n",
    "            accuracies = cross_val_score(pipeline,  x.as_matrix(), y.as_matrix(), scoring= score, cv=CV)\n",
    "            \n",
    "        else:\n",
    "            accuracies = cross_val_score(pipeline, x, y, scoring= score, cv=CV)\n",
    "        '''\n",
    "        accuracies = cross_val_score(pipeline, x, y, scoring= score, cv=CV)   \n",
    "        for fold_idx, accuracy in enumerate(accuracies):\n",
    "            entries.append((model_name, fold_idx, accuracy))\n",
    "            \n",
    "    cv_df = pd.DataFrame(entries, columns=['model_name', 'fold_idx', score])\n",
    "\n",
    "    # Plot different models\n",
    "    plt.figure(figsize = (20,7))\n",
    "    ax = sns.boxplot(x='model_name', y=score, data=cv_df,boxprops=dict(alpha=.8),linewidth=1)\n",
    "    sns.stripplot(x='model_name', y=score, data=cv_df, \n",
    "                  size=6, jitter=True, edgecolor=\"black\", linewidth=.5)\n",
    "    ax.set_xticklabels(ax.get_xticklabels(), rotation=75, fontsize =12) \n",
    "    ax.spines['top'].set_color('none')\n",
    "    ax.spines['right'].set_color('none')\n",
    "    ax.spines['left'].set_smart_bounds(True)\n",
    "    ax.spines['bottom'].set_smart_bounds(True)\n",
    "    plt.xlabel('Model',  fontweight = \"bold\")\n",
    "    plt.ylabel(score,  fontweight = \"bold\")\n",
    "    #plt.gcf().subplots_adjust(top = 0.15)\n",
    "    #plt.gcf().subplots_adjust(bottom = 0.15)\n",
    "    plt.tight_layout()\n",
    "    plt.savefig(score+'_base_models.png')\n",
    "    plt.show()\n",
    "    \n",
    "    cv_scorings[score] = cv_df.groupby('model_name')[score].agg('mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "cv_scorings.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_predict\n",
    "\n",
    "profits = []\n",
    "profits_norm = []\n",
    "\n",
    "for model in models:\n",
    "    revenue_answer, expense_answer = 11, 3\n",
    "\n",
    "    revenues = []\n",
    "    revenues_norm = []\n",
    "    pipeline = make_pipeline(smote_, model)\n",
    "    \n",
    "    for fold_train, fold_valid in CV.split(x,y):\n",
    "        pipeline.fit(x.iloc[fold_train],y.iloc[fold_train])\n",
    "        y_prob = model.predict_proba(x.iloc[fold_valid])[:,1]\n",
    "        t = 0.5\n",
    "        y_pred = [0 if v < t else 1 for v in y_prob]\n",
    "        cm = confusion_matrix(y.iloc[fold_valid], y_pred)\n",
    "        revenue = cm[1][1] * revenue_answer\n",
    "        expenses = cm[:, 1].sum() * expense_answer\n",
    "        net_revenue = revenue - expenses\n",
    "        r_real = np.sum(y.iloc[fold_valid].values)*8\n",
    "\n",
    "        revenues.append(net_revenue)\n",
    "        revenues_norm.append(net_revenue/r_real)\n",
    "        \n",
    "\n",
    "    profits.append(np.average(revenues))\n",
    "    profits_norm.append(np.average(revenues_norm))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "profit_df = pd.DataFrame({'model_name':[x.__class__.__name__ for x in models], 'profit':profits, 'profit_norm':profits_norm})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# add to cv dataframe\n",
    "cv_final_board = cv_scorings.merge(profit_df, how = 'inner',on='model_name')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model_name</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>profit</th>\n",
       "      <th>profit_norm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.843519</td>\n",
       "      <td>0.488400</td>\n",
       "      <td>0.845400</td>\n",
       "      <td>0.617311</td>\n",
       "      <td>210.2</td>\n",
       "      <td>0.509285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GradientBoostingClassifier</td>\n",
       "      <td>0.881632</td>\n",
       "      <td>0.597244</td>\n",
       "      <td>0.675038</td>\n",
       "      <td>0.628470</td>\n",
       "      <td>205.8</td>\n",
       "      <td>0.498822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>LinearDiscriminantAnalysis</td>\n",
       "      <td>0.833121</td>\n",
       "      <td>0.469248</td>\n",
       "      <td>0.849246</td>\n",
       "      <td>0.603079</td>\n",
       "      <td>200.4</td>\n",
       "      <td>0.485502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>RandomForestClassifier</td>\n",
       "      <td>0.884521</td>\n",
       "      <td>0.635084</td>\n",
       "      <td>0.531448</td>\n",
       "      <td>0.576100</td>\n",
       "      <td>180.2</td>\n",
       "      <td>0.436633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>SGDClassifier</td>\n",
       "      <td>0.784043</td>\n",
       "      <td>0.405298</td>\n",
       "      <td>0.887934</td>\n",
       "      <td>0.554179</td>\n",
       "      <td>159.4</td>\n",
       "      <td>0.385756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>LabelSpreading</td>\n",
       "      <td>0.804832</td>\n",
       "      <td>0.418597</td>\n",
       "      <td>0.791327</td>\n",
       "      <td>0.545785</td>\n",
       "      <td>156.0</td>\n",
       "      <td>0.378035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>KNeighborsClassifier</td>\n",
       "      <td>0.814658</td>\n",
       "      <td>0.430256</td>\n",
       "      <td>0.740950</td>\n",
       "      <td>0.542594</td>\n",
       "      <td>153.2</td>\n",
       "      <td>0.371324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>LabelPropagation</td>\n",
       "      <td>0.805988</td>\n",
       "      <td>0.419274</td>\n",
       "      <td>0.775792</td>\n",
       "      <td>0.542709</td>\n",
       "      <td>153.2</td>\n",
       "      <td>0.371239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GaussianNB</td>\n",
       "      <td>0.822726</td>\n",
       "      <td>0.439500</td>\n",
       "      <td>0.647587</td>\n",
       "      <td>0.522018</td>\n",
       "      <td>137.6</td>\n",
       "      <td>0.333305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>MultinomialNB</td>\n",
       "      <td>0.829063</td>\n",
       "      <td>0.450028</td>\n",
       "      <td>0.608974</td>\n",
       "      <td>0.514358</td>\n",
       "      <td>134.2</td>\n",
       "      <td>0.324981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BernoulliNB</td>\n",
       "      <td>0.814060</td>\n",
       "      <td>0.418191</td>\n",
       "      <td>0.624434</td>\n",
       "      <td>0.498419</td>\n",
       "      <td>122.6</td>\n",
       "      <td>0.296917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DecisionTreeClassifier</td>\n",
       "      <td>0.826759</td>\n",
       "      <td>0.434388</td>\n",
       "      <td>0.534615</td>\n",
       "      <td>0.478810</td>\n",
       "      <td>112.8</td>\n",
       "      <td>0.272766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>QuadraticDiscriminantAnalysis</td>\n",
       "      <td>0.764205</td>\n",
       "      <td>0.394314</td>\n",
       "      <td>0.690422</td>\n",
       "      <td>0.486680</td>\n",
       "      <td>88.0</td>\n",
       "      <td>0.211718</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       model_name  accuracy  precision    recall        f1  \\\n",
       "8              LogisticRegression  0.843519   0.488400  0.845400  0.617311   \n",
       "3      GradientBoostingClassifier  0.881632   0.597244  0.675038  0.628470   \n",
       "7      LinearDiscriminantAnalysis  0.833121   0.469248  0.849246  0.603079   \n",
       "11         RandomForestClassifier  0.884521   0.635084  0.531448  0.576100   \n",
       "12                  SGDClassifier  0.784043   0.405298  0.887934  0.554179   \n",
       "6                  LabelSpreading  0.804832   0.418597  0.791327  0.545785   \n",
       "4            KNeighborsClassifier  0.814658   0.430256  0.740950  0.542594   \n",
       "5                LabelPropagation  0.805988   0.419274  0.775792  0.542709   \n",
       "2                      GaussianNB  0.822726   0.439500  0.647587  0.522018   \n",
       "9                   MultinomialNB  0.829063   0.450028  0.608974  0.514358   \n",
       "0                     BernoulliNB  0.814060   0.418191  0.624434  0.498419   \n",
       "1          DecisionTreeClassifier  0.826759   0.434388  0.534615  0.478810   \n",
       "10  QuadraticDiscriminantAnalysis  0.764205   0.394314  0.690422  0.486680   \n",
       "\n",
       "    profit  profit_norm  \n",
       "8    210.2     0.509285  \n",
       "3    205.8     0.498822  \n",
       "7    200.4     0.485502  \n",
       "11   180.2     0.436633  \n",
       "12   159.4     0.385756  \n",
       "6    156.0     0.378035  \n",
       "4    153.2     0.371324  \n",
       "5    153.2     0.371239  \n",
       "2    137.6     0.333305  \n",
       "9    134.2     0.324981  \n",
       "0    122.6     0.296917  \n",
       "1    112.8     0.272766  \n",
       "10    88.0     0.211718  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cv_final_board.sort_values(by=['profit'],ascending = False,inplace=True)\n",
    "cv_final_board\n",
    "#print(cv_final_board.sort_values(by=['profit'],ascending = False).index)\n",
    "#print(cv_final_board.sort_values(by=['f1'],ascending = False).index)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Select k best models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['LogisticRegression', 'RandomForestClassifier', 'GradientBoostingClassifier', 'LinearDiscriminantAnalysis']\n"
     ]
    }
   ],
   "source": [
    "k = 4\n",
    "k_best_models = cv_final_board[:k]['model_name'].values\n",
    "k_best_models = [model for model in models if model.__class__.__name__ in (k_best_models)]\n",
    "print([model.__class__.__name__ for model in k_best_models])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Int64Index([8, 3, 7, 11], dtype='int64')"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cv_final_board[:4].index"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ensemble"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Voting\n",
    "from sklearn.ensemble import BaggingClassifier\n",
    "from mlxtend.classifier import EnsembleVoteClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "n_splits = 5\n",
    "CV = StratifiedKFold(n_splits=n_splits, random_state=seed)\n",
    "cv_df = pd.DataFrame(index=range(n_splits * len(models)))\n",
    "scoring = ['accuracy','precision','recall','f1','profit', 'profit_norm']\n",
    "\n",
    "vote_df = pd.DataFrame()\n",
    "\n",
    "\n",
    "for score in scoring:\n",
    "    \n",
    "    v_claf = EnsembleVoteClassifier(clfs=k_best_models, voting='soft', verbose=0)\n",
    "    pipeline = make_pipeline(smote_, v_claf)\n",
    "    \n",
    "    if score != 'profit' and score != 'profit_norm':\n",
    "        entries = []\n",
    "        model_name = v_claf.__class__.__name__\n",
    "        accuracies = cross_val_score(pipeline, x, y, scoring= score, cv=CV)\n",
    "        for fold_idx, accuracy in enumerate(accuracies):\n",
    "            entries.append((model_name, fold_idx, accuracy))\n",
    "        cv_df = pd.DataFrame(entries, columns=['model_name', 'fold_idx', score])\n",
    "        vote_df[score] = cv_df.groupby('model_name')[score].agg('mean')\n",
    "    \n",
    "    else:\n",
    "        profits = []\n",
    "        profits_norm = []\n",
    "        revenue_answer, expense_answer = 11, 3\n",
    "\n",
    "        revenues = []\n",
    "        revenues_norm = []\n",
    "\n",
    "        for fold_train, fold_valid in CV.split(x,y):\n",
    "            pipeline.fit(x.iloc[fold_train],y.iloc[fold_train])\n",
    "            y_prob = v_claf.predict_proba(x.iloc[fold_valid])[:,1]\n",
    "            t = 0.5\n",
    "            y_pred = [0 if v < t else 1 for v in y_prob]\n",
    "            cm = confusion_matrix(y.iloc[fold_valid], y_pred)\n",
    "            revenue = cm[1][1] * revenue_answer\n",
    "            expenses = cm[:, 1].sum() * expense_answer\n",
    "            net_revenue = revenue - expenses\n",
    "            r_real = np.sum(y.iloc[fold_valid].values)*8\n",
    "\n",
    "            revenues.append(net_revenue)\n",
    "            revenues_norm.append(net_revenue/r_real)\n",
    "        profits.append(np.average(revenues))\n",
    "        profits_norm.append(np.average(revenues_norm))\n",
    "        if score =='profit':\n",
    "            vote_df[score] = profits\n",
    "        else:\n",
    "            vote_df[score] = profits_norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>accuracy</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>profit</th>\n",
       "      <th>profit_norm</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>EnsembleVoteClassifier</th>\n",
       "      <td>0.875865</td>\n",
       "      <td>0.562949</td>\n",
       "      <td>0.802866</td>\n",
       "      <td>0.658296</td>\n",
       "      <td>232.8</td>\n",
       "      <td>0.564263</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        accuracy  precision    recall        f1  profit  \\\n",
       "model_name                                                                \n",
       "EnsembleVoteClassifier  0.875865   0.562949  0.802866  0.658296   232.8   \n",
       "\n",
       "                        profit_norm  \n",
       "model_name                           \n",
       "EnsembleVoteClassifier     0.564263  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vote_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Grid search\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sampling(data, column, seed):\n",
    "    #random.seed(seed)\n",
    "    \n",
    "    num_of_1=len(data.loc[data[column]==1])\n",
    "    idxs=random.sample(set(data.loc[data[column]==0].index), num_of_1)\n",
    "    new_data_0 = data.loc[data.index.isin(idxs)]\n",
    "    \n",
    "    sample = pd.concat((new_data_0, data.loc[data[column]==1]), axis=0)\n",
    "    \n",
    "    y=sample[column]\n",
    "    x=sample.drop(columns=column)\n",
    "    \n",
    "    return( x , y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_t, y_t = sampling(train, 'Response', seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_dict={\n",
    "    'LogisticRegression':{'C':[100, 10, 1, 0.1, 0.01, 0.001, 0.0001],\n",
    "                    'penalty':['l1','l2']},\n",
    "    'LabelPropagation':{'kernel': ['knn'],\n",
    "                  'n_neighbors':[3,5,10,20,50],\n",
    "                  'max_iter': [1000, 1250, 1500, 1750, 2000]},\n",
    "    'LabelSpreading':{'kernel': ['knn'],\n",
    "                  'max_iter': [1000, 2000],\n",
    "                  'n_neighbors':[3,5,10,20,50],\n",
    "                  'alpha': [1e-4, 1e-3, 1e-2, 1e-1],\n",
    "                  'max_iter': [1000, 1250, 1500, 1750, 2000]},\n",
    "    'RandomForestClassifier':{'bootstrap': [True, False],\n",
    "                 'max_depth': [10, 30, None],\n",
    "                 'max_features': ['auto', 'sqrt'],\n",
    "                 'min_samples_leaf': [1, 2],\n",
    "                 'min_samples_split': [2, 5, 10],\n",
    "                 'n_estimators': [10, 50, 100, 200]},\n",
    "    'SGDClassifier':{'solver': ['svd', 'lsqr'],\n",
    "              'shrinkage':[None],\n",
    "              'n_components': [None]},\n",
    "    'GradientBoostingClassifier':{\"loss\":[\"deviance\"],\n",
    "              \"learning_rate\": [0.05, 0.1, 0.2],\n",
    "              \"min_samples_split\": np.linspace(0.1, 0.5, 10),\n",
    "              \"min_samples_leaf\": np.linspace(0.1, 0.5, 10),\n",
    "              \"max_depth\":[3,5],\n",
    "              \"max_features\":[\"log2\",\"sqrt\"],\n",
    "              \"criterion\": [\"friedman_mse\"],\n",
    "              \"subsample\":[0.5, 1.0],\n",
    "              \"n_estimators\":[10, 100]},\n",
    "    'KNeighborsClassifier':{'weights': ['uniform', 'distance'],\n",
    "              'n_neighbors':[3,5,10,20,50],\n",
    "              'metric': ['euclidean', 'manhattan', 'minkowski']},\n",
    "    'LinearDiscriminantAnalysis':{'solver': ['svd', 'lsqr'],\n",
    "              'shrinkage':[None],\n",
    "              'n_components': [None]},\n",
    "    'MLPClassifier':{'hidden_layer_sizes': [(1),(2),(2,2),(3),(3,3),],\n",
    "                  'solver': ['sgd', 'adam','lbfgs'],\n",
    "                  'alpha': 10.0 ** -np.arange(1, 5),\n",
    "                  'momentum':np.arange(0,0.1, 0.2),\n",
    "                  'max_iter': [200,500],\n",
    "                  'learning_rate': ['constant']}\n",
    "    \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add MLP to best models\n",
    "k_best_models.append(MLPClassifier(random_state=seed))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  0%|          | 0/1 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Parameter values for parameter (min_samples_leaf) need to be a non-empty sequence.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-79-735bba7fcc44>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mgrid_search_dict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk_best_models\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mmodel_gs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mgrid_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCV\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'f1'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mmodel_gs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_t\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_t\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mgrid_search_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel_gs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_estimator_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, estimator, param_grid, scoring, fit_params, n_jobs, iid, refit, cv, verbose, pre_dispatch, error_score, return_train_score)\u001b[0m\n\u001b[1;32m   1185\u001b[0m             return_train_score=return_train_score)\n\u001b[1;32m   1186\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparam_grid\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1187\u001b[0;31m         \u001b[0m_check_param_grid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1188\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1189\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_check_param_grid\u001b[0;34m(param_grid)\u001b[0m\n\u001b[1;32m    381\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    382\u001b[0m                 raise ValueError(\"Parameter values for parameter ({0}) need \"\n\u001b[0;32m--> 383\u001b[0;31m                                  \"to be a non-empty sequence.\".format(name))\n\u001b[0m\u001b[1;32m    384\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    385\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Parameter values for parameter (min_samples_leaf) need to be a non-empty sequence."
     ]
    }
   ],
   "source": [
    "grid_search_dict={}\n",
    "for model in tqdm(k_best_models):\n",
    "    model_gs = GridSearchCV(model,grid_dict[model.__class__.__name__],cv = CV,n_jobs=-1,scoring='f1',verbose=1)\n",
    "    model_gs.fit(x_t,y_t)\n",
    "    grid_search_dict[model.__class__.__name__]=model_gs.best_estimator_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### voting with models from grid search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Voting\n",
    "from sklearn.ensemble import BaggingClassifier\n",
    "from mlxtend.classifier import EnsembleVoteClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n",
      "Fitting clf3: gradientboostingclassifier (3/4)\n",
      "Fitting clf4: lineardiscriminantanalysis (4/4)\n",
      "Fitting 4 classifiers...\n",
      "Fitting clf1: logisticregression (1/4)\n",
      "Fitting clf2: randomforestclassifier (2/4)\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-79-8166be0328b5>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     16\u001b[0m         \u001b[0mentries\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     17\u001b[0m         \u001b[0mmodel_name\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mv_claf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 18\u001b[1;33m         \u001b[0maccuracies\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcross_val_score\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpipeline\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[1;33m=\u001b[0m \u001b[0mscore\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mCV\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     19\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mfold_idx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maccuracy\u001b[0m \u001b[1;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maccuracies\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     20\u001b[0m             \u001b[0mentries\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmodel_name\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfold_idx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maccuracy\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\u001b[0m in \u001b[0;36mcross_val_score\u001b[1;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, error_score)\u001b[0m\n\u001b[0;32m    400\u001b[0m                                 \u001b[0mfit_params\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    401\u001b[0m                                 \u001b[0mpre_dispatch\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mpre_dispatch\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 402\u001b[1;33m                                 error_score=error_score)\n\u001b[0m\u001b[0;32m    403\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mcv_results\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'test_score'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    404\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\u001b[0m in \u001b[0;36mcross_validate\u001b[1;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, return_train_score, return_estimator, error_score)\u001b[0m\n\u001b[0;32m    238\u001b[0m             \u001b[0mreturn_times\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mreturn_estimator\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mreturn_estimator\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    239\u001b[0m             error_score=error_score)\n\u001b[1;32m--> 240\u001b[1;33m         for train, test in cv.split(X, y, groups))\n\u001b[0m\u001b[0;32m    241\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    242\u001b[0m     \u001b[0mzipped_scores\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mzip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mscores\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, iterable)\u001b[0m\n\u001b[0;32m    918\u001b[0m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    919\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 920\u001b[1;33m             \u001b[1;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    921\u001b[0m                 \u001b[1;32mpass\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    922\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[1;34m(self, iterator)\u001b[0m\n\u001b[0;32m    757\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    758\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 759\u001b[1;33m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    760\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    761\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[1;34m(self, batch)\u001b[0m\n\u001b[0;32m    714\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    715\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 716\u001b[1;33m             \u001b[0mjob\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    717\u001b[0m             \u001b[1;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    718\u001b[0m             \u001b[1;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[1;34m(self, func, callback)\u001b[0m\n\u001b[0;32m    180\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    181\u001b[0m         \u001b[1;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 182\u001b[1;33m         \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    183\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    184\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, batch)\u001b[0m\n\u001b[0;32m    547\u001b[0m         \u001b[1;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    548\u001b[0m         \u001b[1;31m# arguments in memory\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 549\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    550\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    551\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    223\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    224\u001b[0m             return [func(*args, **kwargs)\n\u001b[1;32m--> 225\u001b[1;33m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[0;32m    226\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    227\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    223\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    224\u001b[0m             return [func(*args, **kwargs)\n\u001b[1;32m--> 225\u001b[1;33m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[0;32m    226\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    227\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\u001b[0m in \u001b[0;36m_fit_and_score\u001b[1;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, error_score)\u001b[0m\n\u001b[0;32m    526\u001b[0m             \u001b[0mestimator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    527\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 528\u001b[1;33m             \u001b[0mestimator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    529\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    530\u001b[0m     \u001b[1;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\imblearn\\pipeline.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[0;32m    237\u001b[0m         \u001b[0mXt\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0myt\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfit_params\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    238\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_final_estimator\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 239\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_final_estimator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mXt\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0myt\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    240\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    241\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\mlxtend\\classifier\\ensemble_vote.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[0;32m    172\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    173\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[0msample_weight\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 174\u001b[1;33m                     \u001b[0mclf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mle_\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    175\u001b[0m                 \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    176\u001b[0m                     clf.fit(X, self.le_.transform(y), \n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\forest.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[0;32m    317\u001b[0m             \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mn_more_estimators\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    318\u001b[0m                 tree = self._make_estimator(append=False,\n\u001b[1;32m--> 319\u001b[1;33m                                             random_state=random_state)\n\u001b[0m\u001b[0;32m    320\u001b[0m                 \u001b[0mtrees\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtree\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    321\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\base.py\u001b[0m in \u001b[0;36m_make_estimator\u001b[1;34m(self, append, random_state)\u001b[0m\n\u001b[0;32m    129\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    130\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mrandom_state\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 131\u001b[1;33m             \u001b[0m_set_random_states\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    132\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    133\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mappend\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\base.py\u001b[0m in \u001b[0;36m_set_random_states\u001b[1;34m(estimator, random_state)\u001b[0m\n\u001b[0;32m     51\u001b[0m     \u001b[0mrandom_state\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcheck_random_state\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     52\u001b[0m     \u001b[0mto_set\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m{\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 53\u001b[1;33m     \u001b[1;32mfor\u001b[0m \u001b[0mkey\u001b[0m \u001b[1;32min\u001b[0m \u001b[0msorted\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_params\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdeep\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     54\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mkey\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'random_state'\u001b[0m \u001b[1;32mor\u001b[0m \u001b[0mkey\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mendswith\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'__random_state'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     55\u001b[0m             \u001b[0mto_set\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mMAX_RAND_SEED\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\base.py\u001b[0m in \u001b[0;36mget_params\u001b[1;34m(self, deep)\u001b[0m\n\u001b[0;32m    181\u001b[0m         \"\"\"\n\u001b[0;32m    182\u001b[0m         \u001b[0mout\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 183\u001b[1;33m         \u001b[1;32mfor\u001b[0m \u001b[0mkey\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_param_names\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    184\u001b[0m             \u001b[0mvalue\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    185\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mdeep\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'get_params'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\base.py\u001b[0m in \u001b[0;36m_get_param_names\u001b[1;34m(cls)\u001b[0m\n\u001b[0;32m    151\u001b[0m         \u001b[1;31m# introspect the constructor arguments to find the model parameters\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    152\u001b[0m         \u001b[1;31m# to represent\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 153\u001b[1;33m         \u001b[0minit_signature\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msignature\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minit\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    154\u001b[0m         \u001b[1;31m# Consider the constructor parameters excluding 'self'\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    155\u001b[0m         parameters = [p for p in init_signature.parameters.values()\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\inspect.py\u001b[0m in \u001b[0;36msignature\u001b[1;34m(obj, follow_wrapped)\u001b[0m\n\u001b[0;32m   3081\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0msignature\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfollow_wrapped\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3082\u001b[0m     \u001b[1;34m\"\"\"Get a signature object for the passed callable.\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3083\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0mSignature\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfrom_callable\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfollow_wrapped\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mfollow_wrapped\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3084\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3085\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\inspect.py\u001b[0m in \u001b[0;36mfrom_callable\u001b[1;34m(cls, obj, follow_wrapped)\u001b[0m\n\u001b[0;32m   2831\u001b[0m         \u001b[1;34m\"\"\"Constructs Signature for the given callable object.\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2832\u001b[0m         return _signature_from_callable(obj, sigcls=cls,\n\u001b[1;32m-> 2833\u001b[1;33m                                         follow_wrapper_chains=follow_wrapped)\n\u001b[0m\u001b[0;32m   2834\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2835\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\inspect.py\u001b[0m in \u001b[0;36m_signature_from_callable\u001b[1;34m(obj, follow_wrapper_chains, skip_bound_arg, sigcls)\u001b[0m\n\u001b[0;32m   2282\u001b[0m         \u001b[1;31m# If it's a pure Python function, or an object that is duck type\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2283\u001b[0m         \u001b[1;31m# of a Python function (Cython functions, for instance), then:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2284\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0m_signature_from_function\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msigcls\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2285\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2286\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0m_signature_is_builtin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\inspect.py\u001b[0m in \u001b[0;36m_signature_from_function\u001b[1;34m(cls, func)\u001b[0m\n\u001b[0;32m   2193\u001b[0m     return cls(parameters,\n\u001b[0;32m   2194\u001b[0m                \u001b[0mreturn_annotation\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mannotations\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'return'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0m_empty\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2195\u001b[1;33m                __validate_parameters__=is_duck_function)\n\u001b[0m\u001b[0;32m   2196\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2197\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\inspect.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, parameters, return_annotation, __validate_parameters__)\u001b[0m\n\u001b[0;32m   2798\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2799\u001b[0m                 params = OrderedDict(((param.name, param)\n\u001b[1;32m-> 2800\u001b[1;33m                                                 for param in parameters))\n\u001b[0m\u001b[0;32m   2801\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2802\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_parameters\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtypes\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mMappingProxyType\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\inspect.py\u001b[0m in \u001b[0;36m<genexpr>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m   2798\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2799\u001b[0m                 params = OrderedDict(((param.name, param)\n\u001b[1;32m-> 2800\u001b[1;33m                                                 for param in parameters))\n\u001b[0m\u001b[0;32m   2801\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2802\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_parameters\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtypes\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mMappingProxyType\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "\n",
    "n_splits = 5\n",
    "CV = StratifiedKFold(n_splits=n_splits, random_state=seed)\n",
    "cv_df = pd.DataFrame(index=range(n_splits * len(models)))\n",
    "scoring = ['accuracy','precision','recall','f1','profit', 'profit_norm']\n",
    "\n",
    "vote_df_grid = pd.DataFrame()\n",
    "\n",
    "\n",
    "for score in scoring:\n",
    "    \n",
    "    v_claf = EnsembleVoteClassifier(clfs=list(grid_search_dict.values()), voting='soft', verbose=1)\n",
    "    pipeline = make_pipeline(smote_, v_claf)\n",
    "    \n",
    "    if score != 'profit' and score != 'profit_norm':\n",
    "        entries = []\n",
    "        model_name = v_claf.__class__.__name__\n",
    "        accuracies = cross_val_score(pipeline, x, y, scoring= score, cv=CV)\n",
    "        for fold_idx, accuracy in enumerate(accuracies):\n",
    "            entries.append((model_name, fold_idx, accuracy))\n",
    "        cv_df = pd.DataFrame(entries, columns=['model_name', 'fold_idx', score])\n",
    "        vote_df_grid[score] = cv_df.groupby('model_name')[score].agg('mean')\n",
    "    \n",
    "    else:\n",
    "        profits = []\n",
    "        profits_norm = []\n",
    "        revenue_answer, expense_answer = 11, 3\n",
    "\n",
    "        revenues = []\n",
    "        revenues_norm = []\n",
    "\n",
    "        for fold_train, fold_valid in CV.split(x,y):\n",
    "            pipeline.fit(x.iloc[fold_train],y.iloc[fold_train])\n",
    "            y_prob = v_claf.predict_proba(x.iloc[fold_valid])[:,1]\n",
    "            t = 0.5\n",
    "            y_pred = [0 if v < t else 1 for v in y_prob]\n",
    "            cm = confusion_matrix(y.iloc[fold_valid], y_pred)\n",
    "            revenue = cm[1][1] * revenue_answer\n",
    "            expenses = cm[:, 1].sum() * expense_answer\n",
    "            net_revenue = revenue - expenses\n",
    "            r_real = np.sum(y.iloc[fold_valid].values)*8\n",
    "\n",
    "            revenues.append(net_revenue)\n",
    "            revenues_norm.append(net_revenue/r_real)\n",
    "        profits.append(np.average(revenues))\n",
    "        profits_norm.append(np.average(revenues_norm))\n",
    "        if score =='profit':\n",
    "            vote_df[score] = profits\n",
    "        else:\n",
    "            vote_df[score] = profits_norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>accuracy</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>profit</th>\n",
       "      <th>profit_norm</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>EnsembleVoteClassifier</th>\n",
       "      <td>0.879322</td>\n",
       "      <td>0.571755</td>\n",
       "      <td>0.802866</td>\n",
       "      <td>0.665068</td>\n",
       "      <td>236.4</td>\n",
       "      <td>0.57286</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        accuracy  precision    recall        f1  profit  \\\n",
       "model_name                                                                \n",
       "EnsembleVoteClassifier  0.879322   0.571755  0.802866  0.665068   236.4   \n",
       "\n",
       "                        profit_norm  \n",
       "model_name                           \n",
       "EnsembleVoteClassifier      0.57286  "
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vote_df_grid"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MLP\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "mlp_param_grid = {'hidden_layer_sizes': [(1),(2),(2,2),(3),(3,3),],\n",
    "                  'solver': ['sgd', 'adam','lbfgs'],\n",
    "                  'alpha': 10.0 ** -np.arange(1, 5),\n",
    "                  'momentum':np.arange(0,0.1, 0.2),\n",
    "                  'max_iter': [200,500],\n",
    "                  'learning_rate': ['constant']}\n",
    "    \n",
    "model = MLPClassifier(random_state=seed)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 1280 candidates, totalling 6400 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  42 tasks      | elapsed:    5.5s\n",
      "[Parallel(n_jobs=-1)]: Done 192 tasks      | elapsed:   11.5s\n",
      "[Parallel(n_jobs=-1)]: Done 442 tasks      | elapsed:   25.3s\n",
      "[Parallel(n_jobs=-1)]: Done 792 tasks      | elapsed:   50.1s\n",
      "[Parallel(n_jobs=-1)]: Done 1242 tasks      | elapsed:  1.2min\n",
      "[Parallel(n_jobs=-1)]: Done 1792 tasks      | elapsed:  1.7min\n",
      "[Parallel(n_jobs=-1)]: Done 2442 tasks      | elapsed:  2.6min\n",
      "[Parallel(n_jobs=-1)]: Done 3192 tasks      | elapsed:  3.8min\n",
      "[Parallel(n_jobs=-1)]: Done 4042 tasks      | elapsed:  5.2min\n",
      "[Parallel(n_jobs=-1)]: Done 5182 tasks      | elapsed:  6.9min\n",
      "[Parallel(n_jobs=-1)]: Done 6400 out of 6400 | elapsed:  8.2min finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=StratifiedKFold(n_splits=5, random_state=0, shuffle=False),\n",
       "       error_score='raise-deprecating',\n",
       "       estimator=MLPClassifier(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n",
       "       beta_2=0.999, early_stopping=False, epsilon=1e-08,\n",
       "       hidden_layer_sizes=(100,), learning_rate='constant',\n",
       "       learning_rate_init=0.001, max_iter=200, momentum=0.9,\n",
       "       n_iter_no_change=10, nesterovs_momentum=True, power_t=0.5,\n",
       "       random_state=0, shuffle=True, solver='adam', tol=0.0001,\n",
       "       validation_fraction=0.1, verbose=False, warm_start=False),\n",
       "       fit_params=None, iid='warn', n_jobs=-1,\n",
       "       param_grid={'hidden_layer_sizes': [1, 2, (2, 2), 3, (3, 3)], 'solver': ['lbfgs'], 'alpha': array([0.1   , 0.01  , 0.001 , 0.0001]), 'momentum': array([0.1   , 0.01  , 0.001 , 0.0001]), 'nesterovs_momentum': [True, False], 'max_iter': [500, 600], 'learning_rate': ['constant'], 'activation': ['identity', 'logistic', 'tanh', 'relu']},\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
       "       scoring='f1', verbose=1)"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ml_grid = GridSearchCV(model,mlp_param_grid, cv = CV, n_jobs=-1,scoring='f1',verbose=1)\n",
    "ml_grid.fit(x_t, y_t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'activation': 'tanh',\n",
       " 'alpha': 0.0001,\n",
       " 'hidden_layer_sizes': 1,\n",
       " 'learning_rate': 'constant',\n",
       " 'max_iter': 500,\n",
       " 'momentum': 0.1,\n",
       " 'nesterovs_momentum': True,\n",
       " 'solver': 'lbfgs'}"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ml_grid.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pipeline = make_pipeline(smote_, ml_grid.best_estimator_)\n",
    "#accuracies = cross_val_score(pipeline, x, y, scoring= 'score', cv=CV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "n_splits = 5\n",
    "CV = StratifiedKFold(n_splits=n_splits, random_state=seed)\n",
    "cv_df = pd.DataFrame(index=range(n_splits * len(models)))\n",
    "scoring = ['accuracy','precision','recall','f1','profit', 'profit_norm']\n",
    "\n",
    "#vote_df_grid = pd.DataFrame()\n",
    "\n",
    "mlp_df = pd.DataFrame()\n",
    "\n",
    "for score in scoring:\n",
    "    model = ml_grid.best_estimator_\n",
    "    #v_claf = EnsembleVoteClassifier(clfs=list(grid_search_dict.values()), voting='soft', verbose=1)\n",
    "    pipeline = make_pipeline(smote_, model)\n",
    "    \n",
    "    if score != 'profit' and score != 'profit_norm':\n",
    "        entries = []\n",
    "        model_name = v_claf.__class__.__name__\n",
    "        accuracies = cross_val_score(pipeline, x, y, scoring= score, cv=CV)\n",
    "        for fold_idx, accuracy in enumerate(accuracies):\n",
    "            entries.append((model_name, fold_idx, accuracy))\n",
    "        cv_df = pd.DataFrame(entries, columns=['model_name', 'fold_idx', score])\n",
    "        mlp_df[score] = cv_df.groupby('model_name')[score].agg('mean')\n",
    "    \n",
    "    else:\n",
    "        profits = []\n",
    "        profits_norm = []\n",
    "        revenue_answer, expense_answer = 11, 3\n",
    "\n",
    "        revenues = []\n",
    "        revenues_norm = []\n",
    "\n",
    "        for fold_train, fold_valid in CV.split(x,y):\n",
    "            pipeline.fit(x.iloc[fold_train],y.iloc[fold_train])\n",
    "            y_prob = model.predict_proba(x.iloc[fold_valid])[:,1]\n",
    "            t = 0.5\n",
    "            y_pred = [0 if v < t else 1 for v in y_prob]\n",
    "            cm = confusion_matrix(y.iloc[fold_valid], y_pred)\n",
    "            revenue = cm[1][1] * revenue_answer\n",
    "            expenses = cm[:, 1].sum() * expense_answer\n",
    "            net_revenue = revenue - expenses\n",
    "            r_real = np.sum(y.iloc[fold_valid].values)*8\n",
    "\n",
    "            revenues.append(net_revenue)\n",
    "            revenues_norm.append(net_revenue/r_real)\n",
    "        profits.append(np.average(revenues))\n",
    "        profits_norm.append(np.average(revenues_norm))\n",
    "        if score =='profit':\n",
    "            mlp_df[score] = profits\n",
    "        else:\n",
    "            mlp_df[score] = profits_norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>accuracy</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "      <th>profit</th>\n",
       "      <th>profit_norm</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>EnsembleVoteClassifier</th>\n",
       "      <td>0.818685</td>\n",
       "      <td>0.446353</td>\n",
       "      <td>0.8454</td>\n",
       "      <td>0.582579</td>\n",
       "      <td>184.4</td>\n",
       "      <td>0.446785</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        accuracy  precision  recall        f1  profit  \\\n",
       "model_name                                                              \n",
       "EnsembleVoteClassifier  0.818685   0.446353  0.8454  0.582579   184.4   \n",
       "\n",
       "                        profit_norm  \n",
       "model_name                           \n",
       "EnsembleVoteClassifier     0.446785  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mlp_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Specific Model (trial)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#model = bagging_clf = BaggingClassifier(GradientBoostingClassifier(random_state = seed))#, random_state=seed, n_jobs = -1)#SVC(probability=True)#RandomForestClassifier(random_state = seed,n_jobs = n_jobs)\n",
    "#v_claf = EnsembleVoteClassifier(clfs=k_best_models, voting='soft',verbose=1)\n",
    "\n",
    "pipeline = make_pipeline(smote_, clf_gscv)\n",
    "pipeline.fit(x_train,y_train)\n",
    "predictions = pipeline.predict(x_test)\n",
    "y_scores = clf_gscv.predict_proba(x_test)[:, 1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_scores = pipeline.predict_proba(x_test)[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "predict_metrics(y_test,predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_scores)\n",
    "roc_auc = auc(false_positive_rate, true_positive_rate)\n",
    "roc_auc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_roc_auc(roc_auc):\n",
    "    plt.figure(figsize=(5,5))\n",
    "    plt.title('AUROC Curve')\n",
    "    plt.plot(false_positive_rate,true_positive_rate, color='red',label = 'AUC = %0.2f' % roc_auc)\n",
    "    plt.legend(loc = 'lower right')\n",
    "    plt.plot([0, 1], [0, 1],linestyle='--')\n",
    "    plt.axis('tight')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "plot_roc_auc(roc_auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import precision_recall_curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "precision, recall, thresholds = precision_recall_curve(y_test, y_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import average_precision_score\n",
    "average_precision = average_precision_score(y_test, y_scores)\n",
    "average_precision"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "from sklearn.utils.fixes import signature\n",
    "\n",
    "step_kwargs = ({'step': 'post'}\n",
    "               if 'step' in signature(plt.fill_between).parameters\n",
    "               else {})\n",
    "plt.figure(figsize=(10,7))\n",
    "plt.step(recall, precision, color='b', alpha=0.2,\n",
    "         where='post')\n",
    "plt.fill_between(recall, precision, alpha=0.2, color='b', **step_kwargs)\n",
    "\n",
    "plt.xlabel('Recall')\n",
    "plt.ylabel('Precision')\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.title('Precision-Recall curve: AP={0:0.2f}'.format(\n",
    "          average_precision))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def adjusted_classes(y_scores, t):\n",
    "    \"\"\"\n",
    "    This function adjusts class predictions based on the prediction threshold (t).\n",
    "    Will only work for binary classification problems.\n",
    "    \"\"\"\n",
    "    return [1 if y >= t else 0 for y in y_scores]\n",
    "\n",
    "def precision_recall_threshold(p, r, thresholds,t=0.5):\n",
    "    \"\"\"\n",
    "    plots the precision recall curve and shows the current value for each\n",
    "    by identifying the classifier's threshold (t).\n",
    "    \"\"\"\n",
    "    \n",
    "    # generate new class predictions based on the adjusted_classes\n",
    "    # function above and view the resulting confusion matrix.\n",
    "    y_pred_adj = adjusted_classes(y_scores, t)\n",
    "    print(pd.DataFrame(confusion_matrix(y_test, y_pred_adj),\n",
    "                       columns=['pred_neg', 'pred_pos'], \n",
    "                       index=['neg', 'pos']))\n",
    "    \n",
    "    # plot the curve\n",
    "    plt.figure(figsize=(10,7))\n",
    "    plt.title(\"Precision and Recall curve ^ = current threshold\")\n",
    "    plt.step(r, p, color='b', alpha=0.2,\n",
    "             where='post')\n",
    "    plt.fill_between(r, p, step='post', alpha=0.2,\n",
    "                     color='b')\n",
    "    plt.ylim([0, 1]);\n",
    "    plt.xlim([0, 1]);\n",
    "    plt.xlabel('Recall');\n",
    "    plt.ylabel('Precision');\n",
    "    \n",
    "    # plot the current threshold on the line\n",
    "    close_default_clf = np.argmin(np.abs(thresholds - t))\n",
    "    plt.plot(r[close_default_clf], p[close_default_clf], '^', c='k',\n",
    "            markersize=15)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "precision, recall, thresholds = precision_recall_curve(y_test, y_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "precision_recall_threshold(precision, recall, thresholds,  t = 0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#get_profit(model, x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "fig = plt.figure(figsize=(15,8))\n",
    "ax1 = fig.add_subplot(1,2,1)\n",
    "ax1.set_xlim([-0.05,1.05])\n",
    "ax1.set_ylim([-0.05,1.05])\n",
    "ax1.set_xlabel('Recall')\n",
    "ax1.set_ylabel('Precision')\n",
    "ax1.set_title('PR Curve')\n",
    "\n",
    "ax2 = fig.add_subplot(1,2,2)\n",
    "ax2.set_xlim([-0.05,1.05])\n",
    "ax2.set_ylim([-0.05,1.05])\n",
    "ax2.set_xlabel('False Positive Rate')\n",
    "ax2.set_ylabel('True Positive Rate')\n",
    "ax2.set_title('ROC Curve')\n",
    "\n",
    "for w,k in zip([1,5,10,20,50,100,10000],'bgrcmykw'):\n",
    "    lr_model = LogisticRegression(class_weight={0:1,1:w})\n",
    "    \n",
    "    lr_model.fit(x_train,y_train)\n",
    "    pred_prob = lr_model.predict_proba(x_test)[:,1]\n",
    "\n",
    "    p,r,_ = precision_recall_curve(y_test,pred_prob)\n",
    "    tpr,fpr,_ = roc_curve(y_test,pred_prob)\n",
    "    print('weight:',w, '\\tPR Value:',average_precision_score(y_test, pred_prob))\n",
    "    ax1.plot(r,p,c=k,label=w)\n",
    "    ax2.plot(tpr,fpr,c=k,label=w)\n",
    "ax1.legend(loc='lower left')    \n",
    "ax2.legend(loc='lower left')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Neural Networks\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. MLP w gird search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "mlp = MLPClassifier(max_iter=100,random_state=seed)\n",
    "\n",
    "parameter_space = {\n",
    "    'hidden_layer_sizes': [(3), (5,5)],\n",
    "    'activation': ['tanh', 'relu'],\n",
    "    'solver': ['sgd', 'adam', 'lbfgs'],\n",
    "    'momentum':np.arange(0, 1.2, 0.2),\n",
    "    'nesterovs_momentum': [True,False],\n",
    "    'alpha': 10.0 ** -np.arange(1, 5),\n",
    "    'learning_rate': ['constant','adaptive'],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = GridSearchCV(mlp, parameter_space, n_jobs=-1, cv=2, verbose=1)\n",
    "clf.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Best paramete set\n",
    "print('Best parameters found:\\n', clf.best_params_)\n",
    "\n",
    "# All results\n",
    "means = clf.cv_results_['mean_test_score']\n",
    "stds = clf.cv_results_['std_test_score']\n",
    "for mean, std, params in zip(means, stds, clf.cv_results_['params']):\n",
    "    print(\"%0.3f (+/-%0.03f) for %r\" % (mean, std * 2, params))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = clf.predict(x_test)\n",
    "predict_metrics(y_test,predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_scores = clf.predict_proba(x_test)[:, 1]\n",
    "false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_scores)\n",
    "roc_auc = auc(false_positive_rate, true_positive_rate)\n",
    "roc_auc\n",
    "\n",
    "plot_roc_auc(roc_auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "average_precision = average_precision_score(y_test, y_scores)\n",
    "\n",
    "step_kwargs = ({'step': 'post'}\n",
    "               if 'step' in signature(plt.fill_between).parameters\n",
    "               else {})\n",
    "plt.figure(figsize=(10,7))\n",
    "plt.step(recall, precision, color='b', alpha=0.2,\n",
    "         where='post')\n",
    "plt.fill_between(recall, precision, alpha=0.2, color='b', **step_kwargs)\n",
    "\n",
    "plt.xlabel('Recall')\n",
    "plt.ylabel('Precision')\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.title('Precision-Recall curve: AP={0:0.2f}'.format(\n",
    "          average_precision))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "get_profit(clf, x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Roc Curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# the classifiers\n",
    "architectures = {\"3\": (3), \"5\": (5), \"3x3\": (3,3), \"6x6\": (6,6)}\n",
    "clfs_ = {}\n",
    "\n",
    "for key, value in tqdm(architectures.items()):\n",
    "    mlp = MLPClassifier(learning_rate_init=0.001, hidden_layer_sizes=value, \n",
    "                        max_iter=500, random_state=seed)\n",
    "    mlp.fit(x_train, y_train)\n",
    "    clfs_[\"mlp_\"+key] = mlp\n",
    "\n",
    "print(\"Candidate models: \", clfs_.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import roc_curve, roc_auc_score, auc\n",
    "\n",
    "c=1\n",
    "plt.figure(figsize=(5,5))\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "thresholds = []\n",
    "for key, value in clfs_.items():\n",
    "    y_pred=value.predict_proba(x_test)[:, c]\n",
    "    fpr, tpr, t = roc_curve(y_test, y_pred)\n",
    "    thresholds.append(t)\n",
    "    auroc = roc_auc_score(y_test, y_pred, average=\"weighted\")\n",
    "    plt.plot(fpr, tpr, marker='.', label = key + \" (AUROC {:.2f}\".format(auroc) + \")\")\n",
    "\n",
    "plt.xlabel('False positive rate')\n",
    "plt.ylabel('True positive rate')\n",
    "plt.title('ROC curve: moons unbalanced classification problem')\n",
    "plt.legend(loc='best', title=\"Models\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Precision - Recall Curve\n",
    "\n",
    "Good for unbalanced Problems"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import precision_recall_curve, average_precision_score\n",
    "\n",
    "c=1\n",
    "plt.figure(figsize=(5,5))\n",
    "plt.plot([0, 1], [0.5, 0.5], 'k--')\n",
    "for key, value in clfs_.items():\n",
    "    y_pred = value.predict_proba(x_test)[:, c]\n",
    "    precision, recall, _ = precision_recall_curve(y_test, y_pred)\n",
    "    auroc = auc(recall, precision)\n",
    "    plt.plot(recall, precision, marker='.', label = key + \" (AUPR {:.2f}\".format(auroc) + \")\")\n",
    "\n",
    "plt.xlabel('Precision')\n",
    "plt.ylabel('Recall')\n",
    "plt.title('PR curve on unseen data')\n",
    "plt.legend(loc='best', title=\"Models\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tuning with parfit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import scikitplot as skplt\n",
    "\n",
    "model = RandomForestClassifier(random_state = seed,n_jobs = n_jobs)\n",
    "model.fit(x_train,y_train)\n",
    "\n",
    "y_prob = model.predict_proba(x_test)[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = RandomForestClassifier(random_state = seed,n_jobs = n_jobs)\n",
    "paramGrid = {\n",
    "    'min_samples_leaf': [1,3,5,10,15,25,50,100,125,150,175,200],\n",
    "    'max_features': ['sqrt', 'log2', 0.4, 0.5, 0.6, 0.7],\n",
    "    'n_estimators': [60],\n",
    "    'n_jobs': [-1],\n",
    "    'random_state': [seed]\n",
    "}\n",
    "\n",
    "clf = GridSearchCV(model, paramGrid, n_jobs=-1, cv=2, verbose=1)\n",
    "clf.fit(x_train,y_train)\n",
    "#clf.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_scores = clf.predict_proba(x_test)[:, 1]\n",
    "\n",
    "average_precision = average_precision_score(y_test, y_scores)\n",
    "\n",
    "step_kwargs = ({'step': 'post'}\n",
    "               if 'step' in signature(plt.fill_between).parameters\n",
    "               else {})\n",
    "plt.figure(figsize=(10,7))\n",
    "plt.step(recall, precision, color='b', alpha=0.2,\n",
    "         where='post')\n",
    "plt.fill_between(recall, precision, alpha=0.2, color='b', **step_kwargs)\n",
    "\n",
    "plt.xlabel('Recall')\n",
    "plt.ylabel('Precision')\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.title('Precision-Recall curve: AP={0:0.2f}'.format(\n",
    "          average_precision))\n",
    "plt.show()\n",
    "\n",
    "get_profit(clf, x_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deriving Classification Threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import make_scorer, average_precision_score, precision_recall_curve\n",
    "mlp_param_grid = {'hidden_layer_sizes': [(3), (6), (3, 3), (5, 5)], \n",
    "                  'learning_rate_init': [0.001, 0.01]}\n",
    "\n",
    "model = MLPClassifier(random_state=seed)\n",
    "clf_gscv = GridSearchCV(model, mlp_param_grid, cv=5, n_jobs=-1, \n",
    "                        scoring=make_scorer(average_precision_score))\n",
    "\n",
    "# fit \n",
    "clf_gscv.fit(x_train, y_train)\n",
    "\n",
    "# analyze\n",
    "print(\"Best parameter set: \", clf_gscv.best_params_, \"\\n\")\n",
    "means = clf_gscv.cv_results_['mean_test_score']\n",
    "stds = clf_gscv.cv_results_['std_test_score']\n",
    "for mean, std, params in zip(means, stds, clf_gscv.cv_results_['params']):\n",
    "    print(\"%0.3f (+/-%0.03f) for %r\" % (mean, std * 2, params))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# generalization ability in terms of profit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#predictions = clf_gscv.best_estimator_.predict(x_test)\n",
    "#predict_metrics(y_test,predictions)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = clf_gscv.best_estimator_\n",
    "get_profit(clf, x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ---------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "clf = LogisticRegression(random_state = seed, n_jobs = n_jobs)\n",
    "clf.fit(x_train, y_train)\n",
    "predictions = clf.predict(x_test)\n",
    "predict_metrics(y_test, predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "get_profit(clf, x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scikitplot as skplt\n",
    "y_prob = clf.predict_proba(x_test)\n",
    "skplt.metrics.plot_ks_statistic(y_test, y_prob,figsize=(10,5))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### !!fazer uma generalizacao do teste ks com profit para decidir threshold!!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plots "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Adjusting Threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = RandomForestClassifier()\n",
    "clf.fit(x_train, y_train)\n",
    "predictions = clf.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_scores = clf.predict_proba(x_test)[:, 1]\n",
    "# for classifiers with decision_function, this achieves similar results\n",
    "# y_scores = classifier.decision_function(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "p, r, thresholds = precision_recall_curve(y_test, y_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def adjusted_classes(y_scores, t):\n",
    "    \"\"\"\n",
    "    This function adjusts class predictions based on the prediction threshold (t).\n",
    "    Will only work for binary classification problems.\n",
    "    \"\"\"\n",
    "    return [1 if y >= t else 0 for y in y_scores]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def precision_recall_threshold(p, r, thresholds, t=0.5):\n",
    "    \"\"\"\n",
    "    plots the precision recall curve and shows the current value for each\n",
    "    by identifying the classifier's threshold (t).\n",
    "    \"\"\"\n",
    "    \n",
    "    # generate new class predictions based on the adjusted_classes\n",
    "    # function above and view the resulting confusion matrix.\n",
    "    y_pred_adj = adjusted_classes(y_scores, t)\n",
    "    print(pd.DataFrame(confusion_matrix(y_test, y_pred_adj),\n",
    "                       columns=['pred_neg', 'pred_pos'], \n",
    "                       index=['neg', 'pos']))\n",
    "    \n",
    "    # plot the curve\n",
    "    plt.figure(figsize=(8,8))\n",
    "    plt.title(\"Precision and Recall curve ^ = current threshold\")\n",
    "    plt.step(r, p, color='b', alpha=0.2,\n",
    "             where='post')\n",
    "    plt.fill_between(r, p, step='post', alpha=0.2,\n",
    "                     color='b')\n",
    "    plt.ylim([0, 1]);\n",
    "    plt.xlim([0, 1]);\n",
    "    plt.xlabel('Recall');\n",
    "    plt.ylabel('Precision');\n",
    "    \n",
    "    # plot the current threshold on the line\n",
    "    close_default_clf = np.argmin(np.abs(thresholds - t))\n",
    "    plt.plot(r[close_default_clf], p[close_default_clf], '^', c='k',\n",
    "            markersize=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "precision_recall_threshold(p, r,0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_precision_recall_vs_threshold(precisions, recalls, thresholds):\n",
    "    plt.figure(figsize=(8, 8))\n",
    "    plt.title(\"Precision and Recall Scores as a function of the decision threshold\")\n",
    "    plt.plot(thresholds, precisions[:-1], \"b--\", label=\"Precision\")\n",
    "    plt.plot(thresholds, recalls[:-1], \"g-\", label=\"Recall\")\n",
    "    plt.ylabel(\"Score\")\n",
    "    plt.xlabel(\"Decision Threshold\")\n",
    "    plt.legend(loc='best')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_precision_recall_vs_threshold(p, r, thresholds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_roc_curve(fpr, tpr, label=None):\n",
    "    plt.figure(figsize=(8,8))\n",
    "    plt.title('ROC Curve')\n",
    "    plt.plot(fpr, tpr, linewidth=2, label=label)\n",
    "    plt.plot([0, 1], [0, 1], 'k--')\n",
    "    plt.axis([-0.005, 1, 0, 1.005])\n",
    "    #plt.xticks(np.arange(0,1, 0.05), rotation=90)\n",
    "    plt.xlabel(\"False Positive Rate\")\n",
    "    plt.ylabel(\"True Positive Rate (Recall)\")\n",
    "    plt.legend(loc='best')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fpr, tpr, auc_thresholds = roc_curve(y_test, y_scores)\n",
    "print(auc(fpr, tpr)) # AUC of ROC\n",
    "plot_roc_curve(fpr, tpr, 'recall_optimized')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "threshold = 0.5\n",
    "\n",
    "predicted_proba = clf.predict_proba(x_test)\n",
    "predictions = (predicted_proba [:,1] >= threshold).astype('int')\n",
    "\n",
    "accuracy = accuracy_score(y_test, predictions)\n",
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "predict_metrics(y_test, predictions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deep Learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras import models, Sequential\n",
    "from tensorflow.keras.layers import Dense, Activation\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from tensorflow.keras import optimizers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_history(history):\n",
    "    acc = history.history['accuracy']\n",
    "    val_acc = history.history['val_accuracy']\n",
    "    loss = history.history['loss']\n",
    "    val_loss = history.history['val_loss']\n",
    "    x = range(1, len(acc) + 1)\n",
    "    \n",
    "    plt.figure(figsize = (12,5))\n",
    "    plt.subplot(1, 2, 1)\n",
    "    plt.plot(x, acc, 'b', label = 'Trainning acc')\n",
    "    plt.plot(x, val_acc, 'r', label = 'Validation acc')\n",
    "    plt.title('Trainning and Validation accuracy')\n",
    "    plt.legend()\n",
    "    plt.subplot(1, 2, 2)\n",
    "    plt.plot(x, loss, 'b', label = 'Trainning loss')\n",
    "    plt.plot(x, val_loss, 'r', label = 'Validation loss')\n",
    "    plt.title('Trainning and Validation loss')\n",
    "    plt.legend()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_dim = x_test.shape[1]\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Dense(10, input_dim=input_dim, activation='relu'))\n",
    "model.add(Dense(10, activation='relu'))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "model.summary()\n",
    "model.compile(loss='binary_crossentropy', optimizer = 'adam',metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "epochs = 165\n",
    "history = model.fit(x_train, y_train,epochs=epochs,batch_size=30, validation_split = 0.1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_history(history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "loss, accuracy = model.evaluate(x_train, y_train, verbose = False)\n",
    "print(\"Trainning Accuracy: {:.2%}\".format(accuracy))\n",
    "\n",
    "loss, accuracy = model.evaluate(x_test, y_test, verbose = False)\n",
    "print(\"Test Accuracy: {:.2%}\".format(accuracy))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = model.predict(x_test)\n",
    "predictions = [int(np.round(x[0])) for x in predictions]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "predict_metrics(y_test, predictions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ensemble"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# knn\n",
    "\n",
    "#create new a knn model\n",
    "knn = KNeighborsClassifier()\n",
    "#create a dictionary of all values we want to test for n_neighbors\n",
    "params_knn = {'n_neighbors': np.arange(1, 25)}\n",
    "#use gridsearch to test all values for n_neighbors\n",
    "knn_gs = GridSearchCV(knn, params_knn, cv=5)\n",
    "#fit model to training data\n",
    "knn_gs.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#save best model\n",
    "knn_best = knn_gs.best_estimator_\n",
    "#check best n_neigbors value\n",
    "print(knn_gs.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Random Forest\n",
    "\n",
    "#create a new random forest classifier\n",
    "rf = RandomForestClassifier()\n",
    "#create a dictionary of all values we want to test for n_estimators\n",
    "params_rf = {'n_estimators': [50, 100, 200]}\n",
    "#use gridsearch to test all values for n_estimators\n",
    "rf_gs = GridSearchCV(rf, params_rf, cv=5)\n",
    "#fit model to training data\n",
    "rf_gs.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#save best model\n",
    "rf_best = rf_gs.best_estimator_\n",
    "#check best n_estimators value\n",
    "print(rf_gs.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Logistic Regression\n",
    "\n",
    "#create a new logistic regression model\n",
    "log_reg = LogisticRegression()\n",
    "#fit the model to the training data\n",
    "log_reg.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('knn: {:.2%}'.format(knn_best.score(x_test, y_test)))\n",
    "print('rf: {:.2%}'.format(rf_best.score(x_test, y_test)))\n",
    "print('log_reg: {:.2%}'.format(log_reg.score(x_test, y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Voting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import VotingClassifier\n",
    "#create a dictionary of our models\n",
    "estimators=[('knn', knn_best), ('rf', rf_best), ('log_reg', log_reg)]\n",
    "#create our voting classifier, inputting our models\n",
    "ensemble = VotingClassifier(estimators, voting='hard')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fit model to training data\n",
    "ensemble.fit(x_train, y_train)\n",
    "#test our model on the test data\n",
    "ensemble.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = ensemble.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "predict_metrics(y_test, predictions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Esemble\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Bagging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "models= [LogisticRegression(random_state = seed, n_jobs = n_jobs),\n",
    "         MultinomialNB(),\n",
    "         BernoulliNB(),\n",
    "         GaussianNB(),\n",
    "         PassiveAggressiveClassifier(random_state=seed, n_jobs = n_jobs), # parece ser bom\n",
    "         NuSVC(random_state=seed, gamma='scale'), # bom\n",
    "         LabelPropagation(n_jobs = n_jobs, alpha = 0, kernel='knn'),\n",
    "         LabelSpreading(n_jobs = n_jobs, kernel = 'knn'),\n",
    "         RandomForestClassifier(random_state = seed,n_jobs = n_jobs),\n",
    "         SGDClassifier(random_state = seed,n_jobs = n_jobs),\n",
    "         DecisionTreeClassifier(random_state = seed),\n",
    "         XGBClassifier(random_state = seed,n_jobs = n_jobs),\n",
    "         GradientBoostingClassifier(random_state = seed),\n",
    "         RidgeClassifier(random_state = seed),\n",
    "         SVC(random_state = seed,kernel='linear'),\n",
    "         KNeighborsClassifier(n_jobs = n_jobs),\n",
    "         NearestCentroid(),\n",
    "         QuadraticDiscriminantAnalysis(),\n",
    "         LinearDiscriminantAnalysis()]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import BaggingClassifier\n",
    "#compare_models = pd.DataFrame({'acc':0})\n",
    "acc_simple = []\n",
    "rec_simple = []\n",
    "simple_names=[]\n",
    "\n",
    "acc_bag = []\n",
    "rec_bag = []\n",
    "bag_names = []\n",
    "\n",
    "for model in tqdm(models):\n",
    "    \n",
    "    model_name = model.__class__.__name__\n",
    "    model.fit(x_train, y_train)\n",
    "    predictions = model.predict(x_test)\n",
    "    #print(\"Original Results of: \", (model_name), '\\n')\n",
    "    #print(classification_report(y_test,predictions))\n",
    "    \n",
    "    acc_simple.append(np.round(accuracy_score(predictions, y_test),3))\n",
    "    rec_simple.append(np.round(recall_score( y_test, predictions),3))\n",
    "    simple_names.append(model_name)\n",
    "    \n",
    "    bagging_clf = BaggingClassifier(model, random_state=seed)\n",
    "    \n",
    "    bagging_clf.fit(x_train, y_train)\n",
    "    predictions = bagging_clf.predict(x_test)\n",
    "    \n",
    "    \n",
    "    \n",
    "    #print(\"Bagged Results of: \", (model_name), '\\n')\n",
    "    #print(classification_report(y_test,predictions))\n",
    "    \n",
    "    acc_bag.append(np.round(accuracy_score(predictions, y_test),3))\n",
    "    rec_bag.append(np.round(recall_score( y_test, predictions),3))\n",
    "    bag_names.append('bag_'+model_name)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "simple_compare = pd.DataFrame({'acc':acc_simple, 'rec': rec_simple}, index=simple_names)\n",
    "bag_compare = pd.DataFrame({'acc':acc_bag, 'rec':rec_bag}, index=bag_names)\n",
    "compare_models = pd.concat([simple_compare, bag_compare])\n",
    "\n",
    "print(compare_models.sort_values(by='acc',ascending=False)[:5])\n",
    "print(compare_models.sort_values(by='rec',ascending=False)[:5])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bagging_clf = BaggingClassifier(RandomForestClassifier(), random_state=seed)\n",
    "bagging_clf.fit(x_train, y_train)\n",
    "predictions = bagging_clf.predict(x_test)\n",
    "predict_metrics(y_test, predictions)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = bagging_clf\n",
    "get_profit(clf, x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Voting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Aqui estÃ£o os modelos normais\n",
    "\n",
    "names = []\n",
    "for model in models:\n",
    "    model_name = model.__class__.__name__\n",
    "    names.append(model_name)\n",
    "model_simple_tuple_list = list(zip(names,models))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import VotingClassifier\n",
    "# Aqui estÃ£o os modelos em Bagging\n",
    "bag_models = []\n",
    "bag_names = []\n",
    "for model in models:\n",
    "    model_ = BaggingClassifier(model, random_state=seed)\n",
    "    model_name = 'bag_'+model.__class__.__name__\n",
    "    bag_models.append(model_)\n",
    "    bag_names.append(model_name)\n",
    "    \n",
    "model_bagged_tuple_list = list(zip(bag_names,bag_models))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_tuple_list = model_simple_tuple_list + model_bagged_tuple_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ensemble = VotingClassifier(estimators=model_tuple_list, voting='hard')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fit model to training data\n",
    "ensemble.fit(x_train, y_train)\n",
    "#test our model on the test data\n",
    "ensemble.score(x_test, y_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = ensemble.predict(x_test)\n",
    "predict_metrics(y_test, predictions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca = pd.read_excel('df_PCA.xlsx', index_col=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = split_data(pca,balance = True, random_state = seed, test_size = 0.2, strat = True)\n",
    "x_train, x_test = scale_data(x_train, x_test)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_jobs = -1\n",
    "models= [LogisticRegression(random_state = seed, n_jobs = n_jobs),\n",
    "         MultinomialNB(),\n",
    "         BernoulliNB(),\n",
    "         PassiveAggressiveClassifier(random_state=seed, n_jobs = n_jobs), # parece ser bom\n",
    "         NuSVC(random_state=seed, gamma='scale'), # bom\n",
    "         QuadraticDiscriminantAnalysis(),\n",
    "         RandomForestClassifier(random_state = seed,n_jobs = n_jobs),\n",
    "         SGDClassifier(random_state = seed,n_jobs = n_jobs),\n",
    "         DecisionTreeClassifier(random_state = seed),\n",
    "         XGBClassifier(random_state = seed,n_jobs = n_jobs),\n",
    "         GradientBoostingClassifier(random_state = seed),\n",
    "         RidgeClassifier(random_state = seed),\n",
    "         SVC(random_state = seed,kernel='linear'),\n",
    "         KNeighborsClassifier(n_jobs = n_jobs),\n",
    "         QuadraticDiscriminantAnalysis(),\n",
    "         LinearDiscriminantAnalysis()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_splits = 5\n",
    "CV = KFold(n_splits=n_splits, random_state=seed)\n",
    "cv_df = pd.DataFrame(index=range(n_splits * len(models)))\n",
    "scoring = 'accuracy' #accuracy #precision #recall #f1\n",
    "entries = []\n",
    "\n",
    "x = x_train\n",
    "y = y_train \n",
    "\n",
    "for model in models:\n",
    "  model_name = model.__class__.__name__\n",
    "  accuracies = cross_val_score(model, x, y, scoring= scoring, cv=CV)\n",
    "  for fold_idx, accuracy in enumerate(accuracies):\n",
    "    entries.append((model_name, fold_idx, accuracy))\n",
    "cv_df = pd.DataFrame(entries, columns=['model_name', 'fold_idx', scoring])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot different models\n",
    "plt.figure(figsize = (20,7))\n",
    "ax = sns.boxplot(x='model_name', y=scoring, data=cv_df,boxprops=dict(alpha=.8))\n",
    "sns.stripplot(x='model_name', y=scoring, data=cv_df, \n",
    "              size=6, jitter=True, edgecolor=\"black\", linewidth=.5)\n",
    "ax.set_xticklabels(ax.get_xticklabels(), rotation=75, fontsize =12) \n",
    "plt.xlabel('Model',  fontweight = \"bold\")\n",
    "plt.ylabel(scoring,  fontweight = \"bold\")\n",
    "plt.show()\n",
    "\n",
    "print(np.round(\n",
    "        cv_df.groupby('model_name').agg('mean').\n",
    "        sort_values(by=[scoring], \n",
    "                    ascending=False)[scoring],decimals=3)*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = LogisticRegression(random_state = seed, n_jobs = n_jobs)\n",
    "clf.fit(x_train, y_train)\n",
    "predictions = clf.predict(x_test)\n",
    "predict_metrics(y_test, predictions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Save and Export Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.externals import joblib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Insert here final model\n",
    "\n",
    "model = LogisticRegression(random_state = seed, n_jobs = n_jobs)\n",
    "model.fit(x_train, y_train)\n",
    "predictions = model.predict(x_test)\n",
    "predict_metrics(y_test, predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save the model to disk\n",
    "filename = 'finalized_model.sav'\n",
    "joblib.dump(model, filename)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the model from disk\n",
    "loaded_model = joblib.load(filename)\n",
    "result = loaded_model.score(x_test_scaled, y_test)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
